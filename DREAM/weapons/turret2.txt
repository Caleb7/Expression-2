@name ctaMegaLaser
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded Power Gravity ArcMode MovableHoloIndex_PitchYaw MovableHoloIndex_Pitch MovableHoloIndex_Yaw TargetCanHit HasTarget HoloProjectileIndex]:number 
@persist [Origin TargetV]:vector 
@persist [Me Chip]:entity
@persist [Projectile]:table

interval(10)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Chip:setAlpha(0)
    Origin = Chip:pos()
    Loaded = 0
    Power = fromUnit("m/s", 12)
    Gravity = gravity()
    ArcMode = 1
    
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HoloCounter = 0
    HologramModel = array("models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_dome.mdl","models/holograms/hq_dome.mdl","models/holograms/hq_torus_thick.mdl","models/holograms/hq_torus_thick.mdl","models/sprops/misc/tubes/size_5/tube_96x6.mdl","models/sprops/misc/tubes/size_5/tube_96x6.mdl","models/props_phx/gears/bevel9.mdl","models/props_phx/gears/bevel9.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl","models/mechanics/robotics/claw.mdl")
    HologramPosition = array(vec(0,0,0),vec(0,0,5),vec(0,0,60),vec(0,47.897,60.1084),vec(0,-47.7969,60.1084),vec(0,48.7446,60.1084),vec(0,-48.7979,60.1084),vec(0,0,60),vec(0,0,60),vec(-18.4011,0,60),vec(19.6012,0,60),vec(0,0,60),vec(-6.1004,-49.2983,36.2852),vec(6.1,-49.2998,36.2998),vec(-6.1,49.2998,36.2998),vec(6.1004,49.2983,36.2852),vec(-8.0507,-0.8008,100.292),vec(-8.0507,0.8008,19.7578),vec(-8.0507,40.292,60.8008),vec(-8.0507,-40.292,59.1992),vec(-8.0507,29.0571,32.0752),vec(-8.0507,-29.022,87.8896),vec(-8.0507,-27.9243,30.9434),vec(-8.0507,27.9243,89.0566),vec(-8.0507,36.918,76.1582),vec(-8.0507,-36.918,43.8418),vec(-8.0507,-16.1401,96.873),vec(-8.0507,16.1587,23.0811),vec(-8.0507,-37.5312,74.6797),vec(-8.0507,37.5313,45.3203),vec(-8.0507,-14.6602,22.5146),vec(-8.0507,14.6792,97.5313))
    HologramAngle = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(90,90,0),ang(90,-90,0),ang(90,90,0),ang(89.9999,90,0),ang(0,90,0),ang(0,90,0),ang(90,0,0),ang(-90,0,0),ang(90,0,0),ang(15,0,0),ang(-15,0,0),ang(15,0,0),ang(-15,0,0),ang(-15,-179.9999,90),ang(15,180,-90),ang(0,165,-180),ang(0,-165,0),ang(10.5453,169.2714,-135.9929),ang(-10.5453,-169.2714,44.007),ang(10.5453,-169.2714,-44.007),ang(-10.5453,169.2713,135.9929),ang(-5.6843,166.0957,158.1937),ang(5.6843,-166.0958,-21.8063),ang(-13.8345,-174.1453,66.7891),ang(13.8345,174.1453,-113.2108),ang(-5.6842,-166.0957,21.8063),ang(5.6842,166.0957,-158.1936),ang(13.8345,-174.1454,-66.7891),ang(-13.8345,174.1454,113.2109))
    HologramScale = array(vec(10,10,1),vec(9,9,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1.5,1.5,1),vec(1.5,1.5,1),vec(1,1,1),vec(0.7,1,0.7),vec(4.4,4.4,4.4),vec(4.4,4.4,4.4),vec(5.55,5.55,1),vec(1,0.1,5),vec(1,0.1,5),vec(1,0.1,5),vec(1,0.1,5),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35),vec(0.35,0.35,0.35))
    HologramColor = array(vec(0,0,0),vec(255,255,255),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,1,2,2,2,2,3,3,3,3,3,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
    timer("createHolos", 1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    
    HoloProjectileIndex = HologramModel:count() + 1
    
    function angle incrementedAngle(O:angle, T:angle, S:number)
    {
        CV=O:forward()
        DV=T:forward()
        Ang=acos(CV:dot(DV))
        if(Ang>S)
        {
            TargetCanHit = 0
            return slerp(quat(O),quat(T),S/Ang):toAngle()
        }
        else
        {
            TargetCanHit = 1
            return T
        }
    }
	
function angle slerpToAngle( CurrentAng:angle, TargetAng:angle, Speed:number ) {
	Ang = acos( CurrentAng:forward():dot( TargetAng:forward() ) )
	return Ang > Speed ? slerp( quat( CurrentAng ), quat( TargetAng ), Speed / Ang ):toAngle() : TargetAng
}
    
    function angle getAngleOfAttack(O:vector, T:vector)
    {
        local VTar = T #+ ( Target:vel() * ( T:setZ(0):distance(O:setZ(0)) / ( Power * cos(holoEntity(8):angles():pitch()))))
        local V = VTar - O
        local Range = V:setZ(0):length()
        local Height = V:z()
        local Angle = atan(((Power^2) + ArcMode*sqrt((Power^4) - Gravity * ((Gravity*(Range^2)) + (2*Height*(Power^2)))))/(Gravity*Range))
        local Time = (Power * sin(Angle) + sqrt((Power * sin(Angle))^2 + (2 * Gravity * Height))) / Gravity
        Timer = Time
        if( Time > 0 & abs(O:z() - T:z()) < 100) { return V:toAngle():setPitch(90-Angle) }
        else { return ang(0,0,0) }
    }
    
    function spawnProjectile(Origin:vector, Target:vector, TargetEntuty:entity, Speed:number, Team:number)
    {
        if( holoCanCreate() )
        {
            HoloProjectileIndex++
            holoCreate(HoloProjectileIndex, Origin, vec(0.01, 0.55, 0.55), (Target - Origin):toAngle(), vec(255), "models/props_canal/canal_cap001.mdl")
            #holoMaterial(HoloProjectileIndex, "models/props_c17/fisheyelens")
            holoMaterial(HoloProjectileIndex, "models/props_combine/tpballglow")
            #holoEntity(HoloProjectileIndex):setTrails(100, 100, 5, "trails/tube", vec(255), 255)
            Projectile:pushArray( array(HoloProjectileIndex, Origin, Target, TargetEntuty, Speed, Team) )
        }
    }
    
    function updateProjectile()
    {
        for( I = 1, Projectile:count() )
        {
            local ID = Projectile[I, array][1, number]
            local T = Projectile[I, array][3, vector]
            local E = holoEntity(ID)
            local S = Projectile[I, array][5, number]
            
            holoAng( ID, ( T - E:pos() ):toAngle() )
            holoPos( ID, E:pos() + ( E:forward() * S ) )
            #holoScaleUnits( ID, vec( 10, 0.55, 0.55) )
            if(E:pos():distance(T) <= S)
            {
                local X = propSpawn("models/props_phx/ball.mdl", 0)
                X:setPos( holoEntity(ID):pos() )
                X:propBreak()
                holoDelete(ID)
                Projectile:remove(I)
            }
        }
    }
    
}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    updateProjectile()
    
    if( changed(Me:keyUse()) && Me:keyUse() )
    {
        TargetV = Me:aimPos()
        HasTarget = 1
    }
    
    if( HasTarget )
    {
        AimV = TargetV - holoEntity(3):pos()
        AimA = incrementedAngle( holoEntity(3):angles(), AimV:toAngle(), 0.75 )
        holoAng( 3, (AimA * ang(1,1,0)))
        holoAng( 2, (AimA * ang(0,1,0)))
        if( AimV:toAngle() == AimA ) 
        {
            spawnProjectile(holoEntity(3):pos(), TargetV, entity(0), 1, 25)
            HasTarget = 0 
        }
    }
}
