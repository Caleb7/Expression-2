########################################
# Exported by Dream's Hologram Modeler
# Date: 12/24/2019 @ 421
# Holograms: 21
# World: [1726.2741699219,-3006.0871582031,-14319.71875]
########################################
@name mech4_base
@persist Hologram:table [ Seat Driver Entity Body ]:entity
@persist [ FR_P1 FR_P2 FR_P3 ]:vector FR_STEP:number FR_STEP_SOUND:number FR_XRD:ranger
@persist [ FL_P1 FL_P2 FL_P3 ]:vector FL_STEP:number FL_STEP_SOUND:number FL_XRD:ranger
@persist [ RR_P1 RR_P2 RR_P3 ]:vector RR_STEP:number RR_STEP_SOUND:number RR_XRD:ranger
@persist [ RL_P1 RL_P2 RL_P3 ]:vector RL_STEP:number RL_STEP_SOUND:number RL_XRD:ranger
@persist [ SPEED SHIFTSPEED LEGSPEED STEPDAMP STEPARCH LEGINCREMENT BODYHEIGHT MAX_OVERSTEP LEG_LEN TURN_SPEED ]:number
@persist [ BODYANG ]:angle
@model models/sprops/cuboids/height12/size_3/cube_36x36x12.mdl
#exit()

if( first( ) ) {
    
    SPEED = 50              # base movement speed
    SHIFTSPEED = 20         # amount to add to speed when shift is pressed
    LEGSPEED = 1.5          # time to complete 4 steps in seconds.
    STEPDAMP = 1            # 1 = full step. > 1 = shorter step
    STEPARCH = 2            # 1 = 100% of distance, 2 = half distance, etc
    LEGINCREMENT = 0.035    # how far the step moves each tick between 0-1
    MAX_OVERSTEP = 135      # max distance for step in units
    BODYHEIGHT = 70         # default height for mech
    TURN_SPEED = 30         # how fast mech turns, higher = faster
    LEG_LEN = 100           # length of leg sements
    
    Body = entity()
    Body:setMass( 50000 )
    Body:propGravity( 0 )
    
    function void async( T, F:string ) { 
        timer( format( "cb:%.0f:%s:null:%s", randint( 1e15 ), F, vonEncode( array( ) ) ), T * 1000 ) 
    }
    
    function void async( T, F:string, X:entity ) { 
        timer( format( "cb:%.0f:%s:e:%s",    randint( 1e15 ), F, vonEncode( array( X ) ) ), T * 1000 ) 
    }
    
    Hologram = table()
    Hologram[ "position", array ] = array(vec(0,0,70),vec(50,50,70),vec(50,50,70),vec(50,50,170),vec(50,50,270),vec(50,50,370),vec(50,-50,70),vec(50,-50,70),vec(50,-50,170),vec(50,-50,270),vec(50,-50,370),vec(-50,50,70),vec(-50,50,70),vec(-50,50,170),vec(-50,50,270),vec(-50,50,370),vec(-50,-50,70),vec(-50,-50,70),vec(-50,-50,170),vec(-50,-50,270),vec(-50,-50,370))
    Hologram[ "angle", array ] = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0))
    Hologram[ "color", array ] = array(vec(0,255,255),vec(255,0,0),vec(0,255,0),vec(0,0,255),vec(255,255,0),vec(255,0,255),vec(255,0,0),vec(0,255,0),vec(0,0,255),vec(255,255,0),vec(255,0,255),vec(255,0,0),vec(0,255,0),vec(0,0,255),vec(255,255,0),vec(255,0,255),vec(255,0,0),vec(0,255,0),vec(0,0,255),vec(255,255,0),vec(255,0,255))
    Hologram[ "parent", array ] = array(0,1,2,3,4,5,1,7,8,9,10,1,12,13,14,15,1,17,18,19,20)
    
    function buffer( ) {
        local Next = Hologram[ "next", number ]
        for( I = Next, Next + clamp( holoRemainingSpawns( ), 0, Hologram[ "parent", array ]:count( ) - Next + 1 ) ) {
            holoCreate(
                I,
                entity():toWorld(Hologram["position", array][I, vector]),
                vec(1.5),
                entity():toWorld(Hologram["angle", array][I, angle]),
                vec4(255),
                "models/sprops/misc/origin.mdl"
            )
            holoParent(I, Hologram["parent", array][I, number])
            Hologram[ "next", number ] = I
        }
        if( Next <= Hologram[ "parent", array ]:count( ) ) { timer( "buffer", 0.1 ) } else {
            rangerHitEntities( 1 )
            rangerHitWater( 1 )
            propSpawnUndo( 0 )
            Seat = seatSpawn( "models/nova/airboat_seat.mdl", holoEntity( 1 ):toWorld( vec( 0,0,0 ) ), Body:angles( ) - ang( 0, 90, 0 ), 0 )
            Seat:parentTo( holoEntity( 1 ) )
            Seat:propFreeze( 0 )
            holoParent( 1, Body )
            holoPos( 1, Body:pos( ) )
            Body:setPos( Body:toWorld( vec( 0, 0, BODYHEIGHT ) ) )
            Body:propFreeze( 1 )
            rangerFilter( Seat )
            rangerFilter( Body )
            rangerPersist( 1 )
            local TOffset = LEGSPEED / 4
            async( TOffset * 0, "fr" )
            async( TOffset * 2, "fl" )
            async( TOffset * 3, "rr" )
            async( TOffset * 1, "rl" )
            runOnTick( 1 )
        }
    } 
    
    buffer( )
    
    function entity:ik3c( A, B, C, D, LengthA, LengthB, Destination:vector ) {
        local AEntity = holoEntity( A )
        Distance = AEntity:pos():distance( Destination )
        Ae = max( Distance, LengthB )
        Be = LengthA
        Ce = min( Distance, LengthB )
        Calc = sqrt( ( (Ae + Be - Ce + Be) * (-Ae + Be + Ce + Be) * (Ae - Be - Ce + Be) * (Ae + Be - Ce - Be) ) / ( 4 * (Ae - Ce) ^ 2 ) )
        local Arcs = ( sign( Distance - LengthA ) + 1 ) / 2 ? asin( Calc / LengthA ) : acos( Calc / LengthA ) + 90
        local YawAxis = This:toLocalAxis( Destination - AEntity:pos() )
        holoAng( A, This:toWorld( ang( 0, atan( YawAxis:y( ), YawAxis:x( ) ), 0 ) ) )
        holoAng( B, holoEntity( A ):toWorld( ang( 0, -AEntity:bearing( Destination ) - 90, AEntity:elevation( Destination ) + Arcs - 90 ) ) )
        holoAng( C, holoEntity( B ):toWorld( ang( 0, 0, -Arcs ) ) )
        holoAng( D, holoEntity( C ):toWorld( ang( 0, 0, -Arcs ) ) )
    }
    
    function fl() {
        FL_P1 = holoEntity( 6 ):pos( )
        FL_P3 = FL_XRD:position( )
        FL_P2 = ( FL_P1 + FL_P3 ) * 0.5 + Body:up() * FL_P1:distance( FL_P3 ) / STEPARCH
        FL_STEP = 0
        if( FL_P1:distance( FL_P3 ) > 35 ) {
            FL_STEP_SOUND = 0
        }
        async( LEGSPEED, "fl" )
    }
    
    function fr() {
        FR_P1 = holoEntity( 11 ):pos( )
        FR_P3 = FR_XRD:position( )
        FR_P2 = ( FR_P1 + FR_P3 ) * 0.5 + Body:up() * FR_P1:distance( FR_P3 ) / STEPARCH
        FR_STEP = 0
        if( FR_P1:distance( FR_P3 ) > 35 ) {
            FR_STEP_SOUND = 0
        }
        async( LEGSPEED, "fr" )
    }
    
    function rl() {
        RL_P1 = holoEntity( 16 ):pos( )
        RL_P3 = RL_XRD:position( )
        RL_P2 = ( RL_P1 + RL_P3 ) * 0.5 + Body:up() * RL_P1:distance( RL_P3 ) / STEPARCH
        RL_STEP = 0
        if( RL_P1:distance( RL_P3 ) > 35 ) {
            RL_STEP_SOUND = 0
        }
        async( LEGSPEED, "rl" )
    }
    
    function rr() {
        RR_P1 = holoEntity( 21 ):pos( )
        RR_P3 = RR_XRD:position( )
        RR_P2 = ( RR_P1 + RR_P3 ) * 0.5 + Body:up() * RR_P1:distance( RR_P3 ) / STEPARCH
        RR_STEP = 0
        if( RR_P1:distance( RR_P3 ) > 40 ) {
            RR_STEP_SOUND = 0
        }
        async( LEGSPEED, "rr" )
    }
}

if( clk( "buffer" ) ) { 
    buffer( )
}

if( tickClk( ) ) {
    
    # Controls
    Driver = Seat:driver()
    local Controls = Body:toWorldAxis( 
        vec( 
            Driver:keyForward( ) - Driver:keyBack( ), 
            Driver:keyLeft( ) - Driver:keyRight( ), 
            0
        ) 
    )
    
    # Easy mount
    if( !Driver:isValid() ) {
        HEIGHT = 30
    } else {
        HEIGHT = BODYHEIGHT
    }
    
    # Raise / lower
    if( Driver:keyJump() ) {
        HEIGHT = 125
    } elseif( Driver:keyWalk() ) {
        HEIGHT = 30
    }
    
    # Rangers
    local V = Body:toWorldAxis( Body:velL( ):normalized( ):setZ( 0 ) * clamp( Body:velL():length() / STEPDAMP, -MAX_OVERSTEP, MAX_OVERSTEP ) )
    RR_XRD = rangerOffset( 250, Body:toWorld( vec( -90, -90, 75 ) ) + V, -Body:up() + -Body:forward() * 0.4 +  Body:right() * 0.4 )
    if( !RR_XRD:hit() ) {
        RR_XRD = rangerOffset( 250, Body:toWorld( vec( -125, -125, 75 ) ) + V, -Body:up() + Body:forward() * 0.25 + -Body:right() * 0.25 )
    }
    RL_XRD = rangerOffset( 250, Body:toWorld( vec( -90,  90, 75 ) ) + V, -Body:up() + -Body:forward() * 0.4 + -Body:right() * 0.4 )
    if( !RL_XRD:hit() ) {
        RL_XRD = rangerOffset( 250, Body:toWorld( vec( -125, 125, 75 ) ) + V, -Body:up() + Body:forward() * 0.25 + Body:right() * 0.25 )
    }
    FR_XRD = rangerOffset( 250, Body:toWorld( vec(  90, -90, 75 ) ) + V, -Body:up() +  Body:forward() * 0.4 +  Body:right() * 0.4 )
    if( !FR_XRD:hit() ) {
        FR_XRD = rangerOffset( 250, Body:toWorld( vec( 125, -125, 75 ) ) + V, -Body:up() + -Body:forward() * 0.25 + -Body:right() * 0.25 )
    }
    FL_XRD = rangerOffset( 250, Body:toWorld( vec(  90,  90, 75 ) ) + V, -Body:up() +  Body:forward() * 0.4 + -Body:right() * 0.4 )
    if( !FL_XRD:hit() ) {
        FL_XRD = rangerOffset( 250, Body:toWorld( vec( 125, 125, 75 ) ) + V, -Body:up() + -Body:forward() * 0.25 + Body:right() * 0.25 )
    }
    
    # Turning value
    Yaw = clamp( round( sin( Body:toLocal( Driver:eyeAngles() ):yaw() ), 3 ) * 2 * TURN_SPEED, -TURN_SPEED, TURN_SPEED )
    if( abs(Yaw) < 10 || !Driver:isValid() ) {
        Yaw = 0
    }
    
    # Body angle
    F = (FR_XRD:distance() + FL_XRD:distance()) / 2
    B = (RR_XRD:distance() + RL_XRD:distance()) / 2
    R = (FR_XRD:distance() + RR_XRD:distance()) / 2
    L = (FL_XRD:distance() + RL_XRD:distance()) / 2
    local Torque = vec( R - L, F - B, Yaw )
    Body:applyTorque( ( Torque * Body:inertia() * 33.33 ) - ( Body:angVelVector() * Body:inertia() * 25 ) + Yaw * 2 )
    
    # Height / Movement
    local Speeeed = SPEED + Driver:keySprint() * SHIFTSPEED
    local Mid = ( holoEntity( 6 ):pos() + holoEntity( 11 ):pos() + holoEntity( 16 ):pos() + holoEntity( 21 ):pos() ) / 4
    local Up = ( Body:pos() - Mid ):normalized() * ( HEIGHT + Body:toLocal(Mid):z() )
    Body:applyForce( Body:mass( ) * Controls * Speeeed + Body:mass( ) * tickInterval( ) - Body:mass( ) * Body:vel() / 2 + Body:mass( ) * Up * 2 )
    
    # Leg movement
    FR_STEP = clamp( FR_STEP + LEGINCREMENT, 0, 1 )
    Body:ik3c( 7, 8, 9, 10, LEG_LEN, LEG_LEN, bezier( FR_P1, FR_P2, FR_P3, FR_STEP ) )
    FL_STEP = clamp( FL_STEP + LEGINCREMENT, 0, 1 )
    Body:ik3c( 2, 3, 4, 5, LEG_LEN, LEG_LEN, bezier( FL_P1, FL_P2, FL_P3, FL_STEP ) )
    RR_STEP = clamp( RR_STEP + LEGINCREMENT, 0, 1 )
    Body:ik3c( 17, 18, 19, 20, LEG_LEN, LEG_LEN, bezier( RR_P1, RR_P2, RR_P3, RR_STEP ) )
    RL_STEP = clamp( RL_STEP + LEGINCREMENT, 0, 1 )
    Body:ik3c( 12, 13, 14, 15, LEG_LEN, LEG_LEN, bezier( RL_P1, RL_P2, RL_P3, RL_STEP ) )
    
    # Step sounds & step dip movement
    if( FR_STEP == 1 & FR_STEP_SOUND == 0 ) {
        holoEntity( 11 ):soundPlay( 11, soundDuration( "garrysmod/balloon_pop_cute.wav" ), "garrysmod/balloon_pop_cute.wav" )
        Body:setPos( Body:pos() + Body:up() * -3 )
        FR_STEP_SOUND = 1
    }
    if( FL_STEP == 1 & FL_STEP_SOUND == 0 ) {
        holoEntity( 6 ):soundPlay( 6, soundDuration( "garrysmod/balloon_pop_cute.wav" ), "garrysmod/balloon_pop_cute.wav" )
        Body:setPos( Body:pos() + Body:up() * -3 )
        FL_STEP_SOUND = 1
    }
    if( RR_STEP == 1 & RR_STEP_SOUND == 0 ) {
        holoEntity( 21 ):soundPlay( 21, soundDuration( "garrysmod/balloon_pop_cute.wav" ), "garrysmod/balloon_pop_cute.wav" )
        Body:setPos( Body:pos() + Body:up() * -3 )
        RR_STEP_SOUND = 1
    }
    if( RL_STEP == 1 & RL_STEP_SOUND == 0 ) {
        holoEntity( 17 ):soundPlay( 17, soundDuration( "garrysmod/balloon_pop_cute.wav" ), "garrysmod/balloon_pop_cute.wav" )
    
        Body:setPos( Body:pos() + Body:up() * -3 )
        RL_STEP_SOUND = 1
    }
}

# Async
if( clkName( ) != "" && !clk( ) ) {
    local Match = clkName( ):match( "^cb:%d+:([^:]+):([%a%d]+):(.*)$" )
    if( Match:count( ) == 3){
        local F = Match[ 1, string ]
        local R = vonDecode( Match[ 3, string ] )
        switch( Match[ 2, string ] ) {
            case "null", F( ), break
            case "e", F( R[ 1, entity ] ), break
        }
        exit()
    }
}







