########################################
# Exported by Dream's Hologram Modeler
# Date: 12/23/2019 @ 198
# Holograms: ??
########################################
@name mech4_smolboi
@persist [ Hologram ]:table
@persist [ FR FL RR RL ]:number
@persist [ FRP1 FRP2 FRP3 ]:vector
@persist [ FLP1 FLP2 FLP3 ]:vector
@persist [ RRP1 RRP2 RRP3 ]:vector
@persist [ RLP1 RLP2 RLP3 ]:vector
@persist [ FRXRD FLXRD RRXRD RLXRD ]:ranger
@persist [ FRSTEP FLSTEP RRSTEP RLSTEP ]:number
@persist [ HEIGHT SPEED SPRINTSPEED STEPINTERVAL STEPSPEED STEPHEIGHTDIV MAXSTEP TURNSPEED LEGLENGTH STEPDDIV STEPLENGTHMAX STEPINCREMENT STEPSOUND]:number
@persist [ RANGERDIST RANGERHEIGHT RANGEROFFSET RANGEROFFSET2 RANGERDIRECTIONOFFSET RANGERDIRECTIONOFFSET2 ]:number
@persist [ BODY SEAT DRIVER ]:entity
@persist [ STEPSOUNDS ]:array
@model models/sprops/cuboids/height12/size_3/cube_36x36x12.mdl

if( first() ) {
    
    function void async( T, F:string           ) { timer( format( "cb:%.0f:%s:null:%s", randint( 1e15 ), F, vonEncode( array(   ) ) ), T * 1000 ) }
    function void async( T, F:string, X:entity ) { timer( format( "cb:%.0f:%s:e:%s"   , randint( 1e15 ), F, vonEncode( array( X ) ) ), T * 1000 ) }
    function void async( T, F:string, X:number ) { timer( format( "cb:%.0f:%s:n:%s"   , randint( 1e15 ), F, vonEncode( array( X ) ) ), T * 1000 ) }
    function void async( T, F:string, X:array  ) { timer( format( "cb:%.0f:%s:r:%s"   , randint( 1e15 ), F, vonEncode(        X ) )  , T * 1000 ) }
    function void async( T, F:string, X:table  ) { timer( format( "cb:%.0f:%s:t:%s"   , randint( 1e15 ), F, vonEncode(        X ) )  , T * 1000 ) }
    function void async( T, F:string, X:string ) { timer( format( "cb:%.0f:%s:s:%s"   , randint( 1e15 ), F, vonEncode( array( X ) ) ), T * 1000 ) }
    
    function init() {
        
        FR = 44
        FL = 2
        RR = 65
        RL = 23
        
        HEIGHT = 70
        SPEED = 50
        SPRINTSPEED = 10
        STEPSPEED = 1.5
        STEPHEIGHTDIV = 2
        STEPLENGTHMAX = 135
        STEPINCREMENT = 0.035
        TURNSPEED = 30
        LEGLENGTH = 100.8
        STEPDDIV = 1
        RANGERDIRECTIONOFFSET = 0.4
        RANGERDIRECTIONOFFSET = 0.25
        STEPSOUNDS = array(
            "garrysmod/balloon_pop_cute.wav"
        )
        
        BODY = entity()
        BODY:setMass( 50000 )
        BODY:propGravity( 0 )
        SEAT = seatSpawn( "models/nova/airboat_seat.mdl", holoEntity( 1 ):toWorld( vec( 0,0,8 ) ), BODY:toWorld( ang( 0, -90, 0 ) ), 0 )
        SEAT:parentTo( holoEntity( 1 ) )
        SEAT:propFreeze( 0 )
        holoParent( 1, BODY )
        holoPos( 1, BODY:pos( ) )
        BODY:setPos( BODY:toWorld( vec( 0, 0, HEIGHT ) ) )
        BODY:propFreeze( 1 )
        rangerFilter( SEAT )
        rangerFilter( BODY )
        STEPSOUND = 1
        RANGERDIST = LEGLENGTH * 2.5
        RANGEROFFSET = LEGLENGTH * 0.9
        RANGERHEIGHT = ( LEGLENGTH * 0.5 ) + ( HEIGHT * 0.4 )
        RANGEROFFSET2 = LEGLENGTH * 1.25
        rangerPersist( 1 )
        async( ( STEPSPEED / 4 ) * 0, "fr" )
        async( ( STEPSPEED / 4 ) * 2, "fl" )
        async( ( STEPSPEED / 4 ) * 3, "rr" )
        async( ( STEPSPEED / 4 ) * 1, "rl" )
        runOnTick( 1 )
    }
    
    Hologram = table()
    Hologram[ "model", array ] = array("models/holograms/hq_sphere.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/props_combine/combinethumper001a.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl")
    Hologram[ "position", array ] = array(vec(0,0,28),vec(20,20,38),vec(20,20,38),vec(20,20,138.7998),vec(20,20,239.6001),vec(20,20,340.3999),vec(20,20,38),vec(20,20,138.7998),vec(20,20,239.6001),vec(0,0,0),vec(20,27.7998,98),vec(20,27.7998,116.5498),vec(20,27.7998,98),vec(20,27.7998,178.7998),vec(20,27.7998,156.0498),vec(20,27.7998,178.7998),vec(20,27.7998,198),vec(20,27.7998,216.5498),vec(20,27.7998,198),vec(20,27.7998,278.7998),vec(20,27.7998,256.0498),vec(20,27.7998,278.7998),vec(-20,20,38),vec(-20,20,38),vec(-20,20,138.7998),vec(-20,20,239.6001),vec(-20,20,340.3999),vec(-20,20,38),vec(-20,20,138.7998),vec(-20,20,239.6001),vec(0,0,0),vec(-20,27.7998,98),vec(-20,27.7998,116.5498),vec(-20,27.7998,98),vec(-20,27.7998,178.7998),vec(-20,27.7998,156.0498),vec(-20,27.7998,178.7998),vec(-20,27.7998,198),vec(-20,27.7998,216.5498),vec(-20,27.7998,198),vec(-20,27.7998,278.7998),vec(-20,27.7998,256.0498),vec(-20,27.7998,278.7998),vec(20,-20,38),vec(20,-20,38),vec(20,-20,138.7998),vec(20,-20,239.6001),vec(20,-20,340.3999),vec(20,-20,38),vec(20,-20,138.7998),vec(20,-20,239.6001),vec(0,0,0),vec(20,-12.2002,98),vec(20,-12.2002,116.5498),vec(20,-12.2002,98),vec(20,-12.2002,178.7998),vec(20,-12.2002,156.0498),vec(20,-12.2002,178.7998),vec(20,-12.2002,198),vec(20,-12.2002,216.5498),vec(20,-12.2002,198),vec(20,-12.2002,278.7998),vec(20,-12.2002,256.0498),vec(20,-12.2002,278.7998),vec(-20,-20,38),vec(-20,-20,38),vec(-20,-20,138.7998),vec(-20,-20,239.6001),vec(-20,-20,340.3999),vec(-20,-20,38),vec(-20,-20,138.7998),vec(-20,-20,239.6001),vec(0,0,0),vec(-20,-12.2002,98),vec(-20,-12.2002,116.5498),vec(-20,-12.2002,98),vec(-20,-12.2002,178.7998),vec(-20,-12.2002,156.0498),vec(-20,-12.2002,178.7998),vec(-20,-12.2002,198),vec(-20,-12.2002,216.5498),vec(-20,-12.2002,198),vec(-20,-12.2002,278.7998),vec(-20,-12.2002,256.0498),vec(-20,-12.2002,278.7998))
    Hologram[ "angle", array ] = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0),ang(-90,90,0),ang(0,-90,0),ang(90,0,0))
    Hologram[ "scale", array ] = array(vec(5,5,5),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.0504,0.0504,0.0504),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.0504,0.0504,0.0504),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.0504,0.0504,0.0504),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.0202,0.0202,0.0202),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.2174,0.1547,0.2007),vec(0.0504,0.0504,0.0504),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5),vec(0.45,0.1,0.1),vec(0.4583,0.4583,2.5),vec(0.8333,0.8333,0.5),vec(0.1,0.1,0.1),vec(0.3333,0.3333,3.7917),vec(0.8333,0.8333,0.5))
    Hologram[ "color", array ] = array(vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150),vec(255,255,255),vec(250,250,250),vec(150,150,150),vec(255,255,255),vec(255,255,255),vec(150,150,150))
    Hologram[ "alpha", array ] = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    Hologram[ "material", array ] = array("models/props_combine/combinethumper002","","","","","","","","","","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002","","","","","","","","","","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002","","","","","","","","","","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002","","","","","","","","","","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002","","sprops/trans/misc/ls_m1","models/props_combine/combinethumper002","phoenix_storms/fender_chrome","phoenix_storms/fender_chrome","models/props_combine/combinethumper002")
    Hologram[ "parent", array ] = array(1,1,2,3,4,5,3,4,5,10,3,11,11,4,14,14,4,17,17,5,20,20,1,23,24,25,26,24,25,26,31,24,32,32,25,35,35,25,38,38,26,41,41,1,44,45,46,47,45,46,47,52,45,53,53,46,56,56,46,59,59,47,62,62,1,65,66,67,68,66,67,68,73,66,74,74,67,77,77,67,80,80,68,83,83)
    
    
    function buffer() {
        local Next = Hologram[ "next", number ]
        for( I = Next, Next + clamp( holoRemainingSpawns( ), 0, Hologram[ "model", array ]:count( ) - Next + 1 ) ) {
            holoCreate(
                I,
                entity():toWorld(Hologram["position", array][I, vector]),
                Hologram["scale", array][I, vector],
                entity():toWorld(Hologram["angle", array][I, angle]),
                vec4(Hologram["color", array][I, vector],
                Hologram["alpha", array ][I,number]),
                Hologram["model", array][I, string]
            )
            holoMaterial(I, Hologram["material", array][I, string])
            holoParent(I, Hologram["parent", array][I, number])
            Hologram[ "next", number ] = I
        }
        if( Next <= Hologram[ "model", array ]:count( ) ) { async( 0.1, "buffer" ) } else { init() }
    } buffer()
    
    function entity:ik3c( A, B, C, D, LengthA, LengthB, Destination:vector ) {
        local AEntity = holoEntity( A )
        Distance = AEntity:pos():distance( Destination )
        Ae = max( Distance, LengthB )
        Be = LengthA
        Ce = min( Distance, LengthB )
        Calc = sqrt( ( (Ae + Be - Ce + Be) * (-Ae + Be + Ce + Be) * (Ae - Be - Ce + Be) * (Ae + Be - Ce - Be) ) / ( 4 * (Ae - Ce) ^ 2 ) )
        local Arcs = ( sign( Distance - LengthA ) + 1 ) / 2 ? asin( Calc / LengthA ) : acos( Calc / LengthA ) + 90
        local YawAxis = This:toLocalAxis( Destination - AEntity:pos() )
        holoAng( A, This:toWorld( ang( 0, atan( YawAxis:y( ), YawAxis:x( ) ), 0 ) ) )
        holoAng( B, holoEntity( A ):toWorld( ang( 0, -AEntity:bearing( Destination ) - 90, AEntity:elevation( Destination ) + Arcs - 90 ) ) )
        holoAng( C, holoEntity( B ):toWorld( ang( 0, 0, -Arcs ) ) )
        holoAng( D, holoEntity( C ):toWorld( ang( 0, 0, -Arcs ) ) )
    }
    
    # Leg step position / timers
    function fl() {
        FLP1 = holoEntity( FL + 4 ):pos( )
        FLP3 = FLXRD:position( )
        FLP2 = ( FLP1 + FLP3 ) * 0.5 + BODY:up() * FLP1:distance( FLP3 ) / STEPHEIGHTDIV
        FLSTEP = 0
        if( FLP1:distance( FLP3 ) > 35 ) {
            STEPSOUND = 0
        }
        async( STEPSPEED, "fl" )
    }
    
    function fr() {
        FRP1 = holoEntity( FR  + 4 ):pos( )
        FRP3 = FRXRD:position( )
        FRP2 = ( FRP1 + FRP3 ) * 0.5 + BODY:up() * FRP1:distance( FRP3 ) / STEPHEIGHTDIV
        FRSTEP = 0
        if( FRP1:distance( FRP3 ) > 35 ) {
            STEPSOUND = 0
        }
        async( STEPSPEED, "fr" )
    }
    
    function rl() {
        RLP1 = holoEntity( RL + 4 ):pos( )
        RLP3 = RLXRD:position( )
        RLP2 = ( RLP1 + RLP3 ) * 0.5 + BODY:up() * RLP1:distance( RLP3 ) / STEPHEIGHTDIV
        RLSTEP = 0
        if( RLP1:distance( RLP3 ) > 35 ) {
            STEPSOUND = 0
        }
        async( STEPSPEED, "rl" )
    }
    
    function rr() {
        RRP1 = holoEntity( RR + 4 ):pos( )
        RRP3 = RRXRD:position( )
        RRP2 = ( RRP1 + RRP3 ) * 0.5 + BODY:up() * RRP1:distance( RRP3 ) / STEPHEIGHTDIV
        RRSTEP = 0
        if( RRP1:distance( RRP3 ) > 35 ) {
            STEPSOUND = 0
        }
        async( STEPSPEED, "rr" )
    }
}

if( tickClk() ) {
    
    # Controls
    DRIVER = SEAT:driver()
    local Controls = BODY:toWorldAxis( 
        vec( 
            DRIVER:keyForward( ) - DRIVER:keyBack( ), 
            DRIVER:keyLeft( ) - DRIVER:keyRight( ), 
            0
        ) 
    )
    
    Yaw = clamp( round( sin( BODY:toLocal( DRIVER:eyeAngles() ):yaw() ), 3 ) * 2 * TURNSPEED, -TURNSPEED, TURNSPEED )
    if( abs(Yaw) < TURNSPEED / 3 || !DRIVER:isValid() ) {
        Yaw = 0
    }
    
    # Easy mount
    if( !DRIVER:isValid() || DRIVER:keyWalk() ) {
        H = HEIGHT / 3
    } elseif( DRIVER:keyJump() ) {
        H = HEIGHT * 1.67
    } else {
        H = HEIGHT
    }
    
    # Rangers
    local V = BODY:toWorldAxis( BODY:velL( ):normalized( ):setZ( 0 ) * clamp( BODY:velL():length() / STEPDDIV, -STEPLENGTHMAX, STEPLENGTHMAX ) )
    RRXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec( -RANGEROFFSET, -RANGEROFFSET, RANGERHEIGHT ) ) + V, -BODY:up() + -BODY:forward() * RANGERDIRECTIONOFFSET +  BODY:right() * RANGERDIRECTIONOFFSET )
    if( !RRXRD:hit() ) {
        RRXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec( -RANGEROFFSET2, -RANGEROFFSET2, RANGERHEIGHT ) ) + V, -BODY:up() + BODY:forward() * RANGERDIRECTIONOFFSET2 + -BODY:right() * RANGERDIRECTIONOFFSET2 )
    }
    RLXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec( -RANGEROFFSET,  RANGEROFFSET, RANGERHEIGHT ) ) + V, -BODY:up() + -BODY:forward() * RANGERDIRECTIONOFFSET + -BODY:right() * RANGERDIRECTIONOFFSET )
    if( !RLXRD:hit() ) {
        RLXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec( -RANGEROFFSET2, RANGEROFFSET2, RANGERHEIGHT ) ) + V, -BODY:up() + BODY:forward() * RANGERDIRECTIONOFFSET2 + BODY:right() * RANGERDIRECTIONOFFSET2 )
    }
    FRXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec(  RANGEROFFSET, -RANGEROFFSET, RANGERHEIGHT ) ) + V, -BODY:up() +  BODY:forward() * RANGERDIRECTIONOFFSET+  BODY:right() * RANGERDIRECTIONOFFSET )
    if( !FRXRD:hit() ) {
        FRXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec( RANGEROFFSET2, -RANGEROFFSET2, RANGERHEIGHT ) ) + V, -BODY:up() + -BODY:forward() * RANGERDIRECTIONOFFSET2 + -BODY:right() * RANGERDIRECTIONOFFSET2 )
    }
    FLXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec(  RANGEROFFSET,  RANGEROFFSET, RANGERHEIGHT ) ) + V, -BODY:up() +  BODY:forward() * RANGERDIRECTIONOFFSET + -BODY:right() * RANGERDIRECTIONOFFSET )
    if( !FLXRD:hit() ) {
        FLXRD = rangerOffset( RANGERDIST, BODY:toWorld( vec( RANGEROFFSET2, RANGEROFFSET2, RANGERHEIGHT ) ) + V, -BODY:up() + -BODY:forward() * RANGERDIRECTIONOFFSET2 + BODY:right() * RANGERDIRECTIONOFFSET2 )
    }
    # BODY angle
    F = ( FRXRD:distance() + FLXRD:distance() ) / 2
    B = ( RRXRD:distance() + RLXRD:distance() ) / 2
    R = ( FRXRD:distance() + RRXRD:distance() ) / 2
    L = ( FLXRD:distance() + RLXRD:distance() ) / 2
    local Torque = vec( R - L, F - B, Yaw )
    BODY:applyTorque( ( Torque * BODY:inertia() * 33.33 ) - ( BODY:angVelVector() * BODY:inertia() * 25 ) + Yaw * 2 )
    
    # Height
    local Mid = ( holoEntity( FR + 4 ):pos() + holoEntity( FL + 4 ):pos() + holoEntity( RR + 4 ):pos() + holoEntity( RL + 4 ):pos() ) / 4
    local Up = ( BODY:pos() - Mid ):normalized() * ( H + BODY:toLocal( Mid ):z() )
    BODY:applyForce( BODY:mass( ) * Controls * SPEED + BODY:mass( ) * tickInterval( ) - BODY:mass( ) * BODY:vel() / 2 + BODY:mass( ) * Up * 2 )
    
    # Leg movement
    FRSTEP = clamp( FRSTEP + STEPINCREMENT, 0, 1 )
    BODY:ik3c( FR, FR + 1, FR + 2, FR + 3, LEGLENGTH, LEGLENGTH, bezier( FRP1, FRP2, FRP3, FRSTEP ) )
    FLSTEP = clamp( FLSTEP + STEPINCREMENT, 0, 1 )
    BODY:ik3c( FL, FL + 1, FL + 2, FL + 3, LEGLENGTH, LEGLENGTH, bezier( FLP1, FLP2, FLP3, FLSTEP ) )
    RRSTEP = clamp( RRSTEP + STEPINCREMENT, 0, 1 )
    BODY:ik3c( RR, RR + 1, RR + 2, RR + 3, LEGLENGTH, LEGLENGTH, bezier( RRP1, RRP2, RRP3, RRSTEP ) )
    RLSTEP = clamp( RLSTEP + STEPINCREMENT, 0, 1 )
    BODY:ik3c( RL, RL + 1, RL + 2, RL + 3, LEGLENGTH, LEGLENGTH, bezier( RLP1, RLP2, RLP3, RLSTEP ) )
    
    # Step sounds & step dip movement
    if( STEPSOUND == 0 ) {
        if( FRSTEP == 1 ) {
            Index = round( random( 1, STEPSOUNDS:count() ) )
            holoEntity( FR + 4 ):soundPlay( FR, soundDuration( STEPSOUNDS[ Index, string ] ), STEPSOUNDS[ Index, string ] )
            BODY:setPos( BODY:pos() + BODY:up() * -HEIGHT * 0.042 )
            STEPSOUND = 1
        }
        if( FLSTEP == 1 ) {
            Index = round( random( 1, STEPSOUNDS:count() ) )
            holoEntity( FR + 4 ):soundPlay( FL, soundDuration( STEPSOUNDS[ Index, string ] ), STEPSOUNDS[ Index, string ] )
            BODY:setPos( BODY:pos() + BODY:up() * -HEIGHT * 0.042 )
            STEPSOUND = 1
        }
        if( RRSTEP == 1 ) {
            Index = round( random( 1, STEPSOUNDS:count() ) )
            holoEntity( FR + 4 ):soundPlay( RR, soundDuration( STEPSOUNDS[ Index, string ] ), STEPSOUNDS[ Index, string ] )
            BODY:setPos( BODY:pos() + BODY:up() * -HEIGHT * 0.042 )
            STEPSOUND = 1
        }
        if( RLSTEP == 1 ) {
            Index = round( random( 1, STEPSOUNDS:count() ) )
            holoEntity( FR + 4 ):soundPlay( RL, soundDuration( STEPSOUNDS[ Index, string ] ), STEPSOUNDS[ Index, string ] )
            BODY:setPos( BODY:pos() + BODY:up() * -HEIGHT * 0.042 )
            STEPSOUND = 1
        }
    }
}

if( clkName() != "" && !clk() ) {
    local Match = clkName( ):match( "^cb:%d+:([^:]+):([%a%d]+):(.*)$" )
    if( Match:count() == 3 ) {
        local F = Match[ 1, string ]
        local R = vonDecode( Match[ 3, string ] )
        switch( Match[ 2, string ] ) {
            case "null", F(), break
            case "e", F( R[ 1, entity ] ), break
            case "n", F( R[ 1, number ] ), break
            case "r", F( R ), break
            case "t", F( vonDecodeTable( Match[ 3, string ] ) ), break
            case "s", F( R[ 1, string ] ), break
        }
        exit()
    }
}

