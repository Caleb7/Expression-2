@name Mech Chip
@persist LIGHTS COLOR3:vector PLAYERTIMER SEATFINDER MM BEDARRANGEMENT DOORANG ENGV USERTOGGLE SONGSELECT CRASH STARTTIMER STABALIZER SEAT:entity
@persist LASTPLAYED MUSV STEP:entity STRINGARRAY:array SONGDURATIONS:array COLOR:vector COLOR2:vector STRAFE ENTITIES NOCOLLIDE M
@persist PASSENGERSEAT:entity SEAT2:entity PASSENGERSEAT2:entity SCALE  HEIGHTADD OVERSTEER REVERSESLOWER BRAKES ANGLERELATIVEAREA LEAN 
@persist RANGERSTABALIZATION Pos:vector Prop:entity HEIGHT ANGLERESIST FORCERESIST YAWRESIST F T FB TURNRATE TRATE FRATE MAXSPEED ACCELERATION N HEIGHT2 JUMP JUMPPOWER
@model models/sprops/rectangles/size_4_5/rect_42x42x3.mdl

if(first()){
    SCALE=1
    HEIGHT=50
    HEIGHT2=15
    Prop=entity()
    FORCERESIST=0.3
    YAWRESIST=1
    MAXSPEED=2000
    TURNRATE=100
    ACCELERATION=40
    Prop:setMass(5000)
    ANGLERELATIVEAREA=40
    RANGERSTABALIZATION=1
    LEAN=10
    OVERSTEER=0.5 #1.1
    HEIGHTADD=3
    REVERSESLOWER=3
    BRAKES=2
    ENTITIES=1
    NOCOLLIDE=0
    JUMPPOWER=600
    COLOR=vec(255,180,75)
    COLOR2=vec(255,160,70)
    COLOR3=vec(255,255,255)
    ENGV=0.3
    MUSV=0.4
    STABALIZER=0.5
    SEATFINDER=0
    Prop:propPhysicalMaterial("metalvehicle")
    Prop:propSetBuoyancy( 0 )
    #SEAT = seatSpawn( "", entity():toWorld( vec( 0, 0, 10 ) ), ang(0,-90,0), 0 )
    #SEAT:parentTo( entity() )
    rangerPersist( 1 )
    rangerHitEntities( 0 )
    
    for( I = 1, 10 ) {
        holoCreate( I )
        holoColor( I, select( I, vec(255,0,0), vec(0,255,0), vec(0,0,255), vec(0,255,255), vec(255), vec(255,0,0), vec(0,255,0), vec(0,0,255), vec(0,255,255), vec(255) ) )
        holoScale( I, vec(0.3) )
    }
    
    runOnTick( 1 )
}

#interval(40)

if( changed( time("sec") ) & PLAYERTIMER != 0 ) {
    PLAYERTIMER -= 1
}

if(CRASH > 0 ) {
    CRASH -= 1
}

if( changed( owner():keyPressed( "backspace" ) ) & owner():keyPressed( "backspace" ) == 1 ) {
    USERTOGGLE++
} 

if(USERTOGGLE > 1 ) {
    USERTOGGLE = 0
}

if( changed( USERTOGGLE ) ) {
    hint( "user can drive> " + USERTOGGLE, 1000 )
}

#if( SEAT:driver():model() != "" & USERTOGGLE == 1 & CRASH == 0 | SEAT:driver() == owner() & CRASH == 0 ) {
    
    MPH = round( toUnit( "mph", Prop:vel():length() ) )
    
    local From = vec()
    local To = vec()
    
    From = Prop:toWorld( vec( 0, 0, HEIGHT2 * ( SCALE ) ) )
    To = Prop:toWorld( vec( 0, 0, -HEIGHT * 2 ) )
    R = rangerOffset( From, To )
    holoPos( 1, From )
    holoPos( 6, R:position() )
    
    #From = Prop:toWorld( vec( ANGLERELATIVEAREA, 0, HEIGHT2 ) )
    From = Prop:toWorld( vec( 0, 0, HEIGHT2 ) )
    To = Prop:toWorld( vec( ANGLERELATIVEAREA, 0, -HEIGHT * 2 ) )
    RF = rangerOffset( From, To )
    holoPos( 2, From )
    holoPos( 7, RF:position() )
    
    #From = Prop:toWorld( vec( -ANGLERELATIVEAREA, 0, HEIGHT2 ) )
    From = Prop:toWorld( vec( 0, 0, HEIGHT2 ) )
    To = Prop:toWorld( vec( -ANGLERELATIVEAREA, 0, -HEIGHT * 2 ) )
    RB = rangerOffset( From, To )
    holoPos( 3, From )
    holoPos( 8, RB:position() )
    
    #From = Prop:toWorld( vec( 0, ANGLERELATIVEAREA, HEIGHT2 ) )
    From = Prop:toWorld( vec( 0, 0, HEIGHT2 ) )
    To = Prop:toWorld( vec( 0, ANGLERELATIVEAREA, -HEIGHT * 2 ) )
    RR = rangerOffset( From, To )
    holoPos( 4, From )
    holoPos( 9, RR:position() )
    
    #From = Prop:toWorld( vec( 0, -ANGLERELATIVEAREA, HEIGHT2 ) )
    From = Prop:toWorld( vec( 0, 0, HEIGHT2 ) )
    To = Prop:toWorld( vec( 0, -ANGLERELATIVEAREA, -HEIGHT * 2 ) )
    RL = rangerOffset( From, To )
    holoPos( 5, From )
    holoPos( 10, RL:position() )
    
    #SWAYANG = ( ang( RB:distance() - RF:distance() + ( F * LEAN ), 0, RR:distance() - RL:distance() + ( TRATE * -LEAN ) ) )
    
    if( R:distance() < HEIGHT * 4 ) {
        Pos = Prop:toWorld( vec( 0, 0, ( ( HEIGHT * 2 ) / 2 ) + ( ( ( HEIGHT * HEIGHTADD ) / 2 ) * ( abs( MPH ) / 844 ) ) - R:distance() ) )
    } else { 
        Pos = Prop:pos() + vec( 0, 0, ( ( HEIGHT * 2 ) / 2 ) + ( ( ( HEIGHT * HEIGHTADD ) / 2 ) * ( abs( MPH ) /844 ) ) - R:distance() )
    }
    
    if( SEAT:driver():keyAttack2() == 0 ) {
        
        if( SEAT:driver():keyPressed("w") == 0 & SEAT:driver():keyPressed( "s" ) == 0 ) {
            if( MPH < 20 & FRATE > 0 ) { 
                FRATE -= FRATE / 10 
            }
            
            if( MPH < 10 ) {
                if( abs( FRATE ) > 400 ) { 
                    CRASH = 50 
                } 
                FRATE = FRATE * -0.1 
                FB = 1
            }
        }
        
        if( changed( SEAT:driver():keyPressed( "w" ) ) & SEAT:driver():keyPressed( "w" ) == 1 ) {
            F = 1
        }
        
        if( changed( SEAT:driver():keyPressed( "s" ) ) & SEAT:driver():keyPressed( "s" ) == 1 ) {
            F=-1 
        }
        
        F -= F / 20
        
        if( SEAT:driver():keyPressed( "w" ) & R:distance() < HEIGHT * 4 ) {
            FRATE += ACCELERATION
        }
        
        if( SEAT:driver():keyPressed("s") & R:distance() < HEIGHT * 4 ){
            if( FRATE > -MAXSPEED / REVERSESLOWER ) {
                FRATE -= ACCELERATION / 2 * BRAKES
            }
        }
        
        if( FRATE > MAXSPEED & SEAT:driver():keySprint() ==0 ) {
            FRATE = MAXSPEED
        }
        if( FRATE < -MAXSPEED / REVERSESLOWER ) {
            FRATE = -MAXSPEED / REVERSESLOWER
        }
        
        T=0
        
        if(SEAT:driver():keyPressed("a")){
            T=1
        }
        if(SEAT:driver():keyPressed("d")){
            T=-1
        }
        if(SEAT:driver():keyPressed("d")==0&SEAT:driver():keyPressed("a")==0){
            T=0 
            TRATE-=TRATE/1.5 
        }
        
        STRAFE=0
        
        if(SEAT:driver():keyPressed("d")&FRATE<1&SEAT:driver():keyJump()){
            STRAFE=70 
            T=0
        }
        if(SEAT:driver():keyPressed("a")&FRATE<1&SEAT:driver():keyJump()){
            STRAFE=-70 
            T=0
        }
        
        TRATE+=T*0.2
        #[
        if(TRATE<-1){
            TRATE=-1
        }
        
        if(TRATE>1){
            TRATE=1
        }
        ]#
        TRATE = clamp( TRATE, -1, 1 )
        
        if(FRATE>3){
            FB=1
        }
        
        if(FRATE<-3){
            FB=-1
        }
        
        if(SEAT:driver():keyJump()&R:distance()<HEIGHT*4|SEAT:driver():model()==""){
            FB=1 
            FRATE-=FRATE/10
        }
        
        if( R:distance() < HEIGHT * 4 ) {
            #Prop:applyForce(((((Pos-Prop:pos())*4) - (Prop:vel()*vec(STABALIZER,STABALIZER,STABALIZER)))*Prop:mass())*vec(1,1,1)+(Prop:forward()*FRATE*(SCALE)*Prop:mass())+(Prop:right()*STRAFE*Prop:mass()))
            
        }
        
        Prop:applyForce( ( Prop:mass( ) * -propGravity() * tickInterval( ) - ( Prop:vel() * Prop:mass() ) / 75 ) )
        
        #[
        local A = ( -Prop:angVel() * FORCERESIST * Prop:mass() ) * ang( 1, 0, 1 )
        local B = ang( 0, ( -Prop:mass() * Prop:angVel() ):yaw() * YAWRESIST, 0 )
        local C = ang( 0, TRATE * TURNRATE * Prop:mass() * FB - FRATE / MAXSPEED * OVERSTEER, 0 )
        local D = SWAYANG * ang( 1, 0, 1 ) * -1 * Prop:mass()
        Prop:applyAngForce( A + B + C + D )
        ]#
        
        SWAYANG =  ang(
            RB:distance() - RF:distance() + 0, 
            0, 
            RR:distance() - RL:distance() #+ ( TRATE * -1 ) 
        ) 
        
        local A = ( -Prop:angVel() * 0.3 * Prop:mass() ) * ang( 1, 0, 1 )
        local D = SWAYANG * ang( 1, 0, 1 ) * -1 * Prop:mass()
        Prop:applyAngForce( A + D )
        
        JUMP=JUMPPOWER
        
    }
#} else {
#    FRATE = 0
#    Prop:propSetBuoyancy( 1 )
#}




























