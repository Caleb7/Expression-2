@name ctaFireBase
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded Power Gravity ArcMode MovableHoloIndex_PitchYaw MovableHoloIndex_Pitch MovableHoloIndex_Yaw TargetCanHit]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Chip:setAlpha(0)
    Origin = Chip:pos()
    Loaded = 0
    Power = fromUnit("m/s", 12)
    Gravity = gravity()
    ArcMode = 1

    MovableHoloIndex_PitchYaw = 31
    MovableHoloIndex_Pitch = 0
    MovableHoloIndex_Yaw = 2
    
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HoloCounter = 0
    HologramModel = array("models/holograms/octagon.mdl","models/holograms/octagon.mdl","models/holograms/octagon.mdl","models/holograms/octagon.mdl","models/holograms/hq_torus_thin.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/sprops/geometry/hhex_24.mdl","models/holograms/hq_dome.mdl","models/holograms/octagon.mdl","models/holograms/octagon.mdl","models/props_lab/reciever01a.mdl","models/props_lab/reciever01a.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/octagon.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_hdome_thin.mdl","models/holograms/hq_hdome_thin.mdl","models/holograms/hexagon.mdl","models/sprops/trans/exhaust/tip_1.mdl","models/items/combine_rifle_ammo01.mdl")
    HologramPosition = array(vec(0,0,0),vec(0,0,2),vec(0,0,3.75),vec(0,0,4.75),vec(0,0,1),vec(11.8632,-28.6401,0.2002),vec(28.6403,-11.8633,0.2002),vec(28.6403,11.8633,0.2002),vec(11.8632,28.6401,0.2002),vec(-11.8633,28.6401,0.2002),vec(-28.6404,11.8633,0.2002),vec(-28.6404,-11.8633,0.2002),vec(-11.8633,-28.6401,0.2002),vec(16.6298,6.8882,4),vec(6.8883,16.6299,4),vec(-6.8883,16.6299,4),vec(-16.6299,6.8882,4),vec(-16.6299,-6.8882,4),vec(-6.8883,-16.6299,4),vec(6.8883,-16.6299,4),vec(16.6298,-6.8882,4),vec(0,0,5),vec(0,0,10),vec(0,0,10),vec(0,6,12),vec(0,-6,12),vec(0,13,11),vec(0,-13,11),vec(0,0,10),vec(0,0,21.25),vec(0,0,21.25),vec(-3.8,9.7998,16),vec(3.8,9.7998,16),vec(-3.8,-9.7998,16),vec(3.8,-9.7998,16),vec(0,-1,21.25),vec(0,1,21.25),vec(2,0,21.25),vec(24,0,21.25),vec(51,0,21.25))
    HologramAngle = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,22.5,-90),ang(0,67.5,-90),ang(0,112.5,-90),ang(0,157.4999,-90),ang(0,-157.4999,-90),ang(0,-112.5,-90),ang(0,-67.5,-90),ang(0,-22.5,-90),ang(0,112.5,-60),ang(0,157.5,-60),ang(0,-157.5,-60),ang(0,-112.5,-60),ang(0,-67.5,-60),ang(0,-22.5,-60),ang(0,22.5,-60),ang(0,67.5,-60),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(-90,90,0),ang(-90,90,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,90),ang(0,0,0),ang(0,112.5,0),ang(0,-112.5,0),ang(0,-112.5,0),ang(0,112.5,0),ang(0,0,90),ang(0,0,-90),ang(0,90,90),ang(0,0,90),ang(90,0,0))
    HologramScale = array(vec(7,7,0.1),vec(3.55,3.55,0.2),vec(2.99,2.99,0.2),vec(1.97,1.97,0.2),vec(4.3,4.3,3),vec(1.3,0.7,1.25),vec(1.3,0.7,1.25),vec(1.3,0.7,1.25),vec(1.3,0.7,1.25),vec(1.3,0.7,1.25),vec(1.3,0.7,1.25),vec(1.3,0.7,1.25),vec(1.3,0.7,1.25),vec(0.68,0.01,0.35),vec(0.68,0.01,0.35),vec(0.68,0.01,0.35),vec(0.68,0.01,0.35),vec(0.68,0.01,0.35),vec(0.68,0.01,0.35),vec(0.68,0.01,0.35),vec(0.68,0.01,0.35),vec(1.5,1.5,1),vec(1.5,1.5,0.2),vec(1.5,1.5,0.2),vec(0.45,0.45,0.45),vec(0.45,0.45,0.45),vec(0.2,0.2,1.85),vec(0.2,0.2,1.85),vec(2,2,0.15),vec(0.15,0.15,2.2),vec(0.25,0.25,0.25),vec(0.1,0.75,1),vec(0.1,0.75,1),vec(0.1,0.75,1),vec(0.1,0.75,1),vec(1,1,1),vec(1,1,1),vec(0.4,0.4,1),vec(9.75,1,1),vec(0.75,0.75,0.75))
    HologramColor = array(vec(40,40,40),vec(50,50,50),vec(35,35,35),vec(25,25,25),vec(25,25,25),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(50,50,50),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(25,25,25),vec(45,45,45),vec(25,25,25))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,31,31,31,31,31)
    timer("createHolos", 1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    
    function angle incrementedAngle(O:angle, T:angle, S:number)
    {
        CV=O:forward()
        DV=T:forward()
        Ang=acos(CV:dot(DV))
        if(Ang>S)
        {
            TargetCanHit = 0
            return slerp(quat(O),quat(T),S/Ang):toAngle()
        }
        else
        {
            TargetCanHit = 1
            return T
        }
    }
    
    function angle getAngleOfAttack(O:vector, T:vector)
    {
        local VTar = T #+ ( Target:vel() * ( T:setZ(0):distance(O:setZ(0)) / ( Power * cos(holoEntity(8):angles():pitch()))))
        local V = VTar - O
        local Range = V:setZ(0):length()
        local Height = V:z()
        local Angle = atan(((Power^2) + ArcMode*sqrt((Power^4) - Gravity * ((Gravity*(Range^2)) + (2*Height*(Power^2)))))/(Gravity*Range))
        local Time = (Power * sin(Angle) + sqrt((Power * sin(Angle))^2 + (2 * Gravity * Height))) / Gravity
        Timer = Time
        if( Time > 0 & abs(O:z() - T:z()) < 100) { return V:toAngle():setPitch(90-Angle) }
        else { return ang(0,0,0) }
    }
}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    TargetV = owner():pos()
    AimV = TargetV - holoEntity(MovableHoloIndex_PitchYaw):pos()
    AimA = incrementedAngle( holoEntity(MovableHoloIndex_PitchYaw):angles(), AimV:toAngle(), 0.75 )
    
    holoAng( 31, (AimA * ang(1,1,0)))
    holoAng( 2, (AimA * ang(0,1,0)))
}
