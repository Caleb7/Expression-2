@name qc01
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0
    HoloCounter = 0
    HologramModel = array("models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/cylinder.mdl","models/holograms/cylinder.mdl","models/holograms/cylinder.mdl","models/holograms/cylinder.mdl","models/sprops/trans/air/prop_2b_l.mdl","models/sprops/trans/air/prop_2b_l.mdl","models/sprops/trans/air/prop_2b_l.mdl","models/sprops/trans/air/prop_2b_l.mdl")
    HologramPosition = array(vec(0,0,40),vec(0,0,40),vec(0,0,40),vec(4.199951171875,-4.159912109375,40.9296875),vec(-4.199951171875,-4.159912109375,40.9296875),vec(4.199951171875,4.159912109375,40.9296875),vec(-4.199951171875,4.159912109375,40.9296875),vec(4.199951171875,-4.159912109375,40.5302734375),vec(-4.199951171875,-4.159912109375,40.5302734375),vec(4.199951171875,4.159912109375,40.5302734375),vec(-4.199951171875,4.159912109375,40.5302734375),vec(-4.199951171875,4.159912109375,40.9296875),vec(4.199951171875,4.159912109375,40.9296875),vec(-4.199951171875,-4.159912109375,40.9296875),vec(4.199951171875,-4.159912109375,40.9296875))
    HologramAngle = array(ang(0,0,0),ang(89.999984741211,45,0),ang(89.999984741211,135,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(89.999984741211,-0,0),ang(89.999984741211,-0,0),ang(89.999984741211,-0,0),ang(89.999984741211,-0,0))
    HologramScale = array(vec(0.20000000298023,0.20000000298023,0.0099999997764826),vec(0.0099999997764826,0.0099999997764826,1),vec(0.0099999997764826,0.0099999997764826,1),vec(0.5799999833107,0.5799999833107,0.5799999833107),vec(0.5799999833107,0.5799999833107,0.5799999833107),vec(0.5799999833107,0.5799999833107,0.5799999833107),vec(0.5799999833107,0.5799999833107,0.5799999833107),vec(0.019999999552965,0.019999999552965,0.10000000149012),vec(0.019999999552965,0.019999999552965,0.10000000149012),vec(0.019999999552965,0.019999999552965,0.10000000149012),vec(0.019999999552965,0.019999999552965,0.10000000149012),vec(0.050000000745058,0.050000000745058,0.050000000745058),vec(0.050000000745058,0.050000000745058,0.050000000745058),vec(0.050000000745058,0.050000000745058,0.050000000745058),vec(0.050000000745058,0.050000000745058,0.050000000745058))
    HologramColor = array(vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","")
    HologramSkin = array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
    HologramParent = array(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
    timer("createHolos", 1)
    print(HologramModel:count())
}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    for(I = 12, 15)
    {
        holoAng( I, holoEntity(I):toWorld( ang(0,0,45)))
    }
}
