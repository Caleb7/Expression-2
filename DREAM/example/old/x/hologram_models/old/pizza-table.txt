@name pizza-table
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0

    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HoloCounter = 0
    HologramModel = array("models/props_c17/furnituretable003a.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl")
    HologramPosition = array(vec(0,0,10.8),vec(0,0,22.6801),vec(0,0,22.6801),vec(0,0,23.0501),vec(-6.8767,-3.4033,23.0501),vec(-1.7517,6.2062,23.0501),vec(11.3972,-11.9971,23.0501),vec(9.7976,10.7975,23.0501),vec(-1.3997,-13.7966,23.0501),vec(-15.5962,6.1985,23.0501),vec(-11.7971,-10.5974,23.0501),vec(4.199,-6.3983,23.0501),vec(16.5959,1.1997,23.0501),vec(7.5981,1.7997,23.0501),vec(2.3994,14.7964,23.0501),vec(-8.198,10.1975,23.0501),vec(-16.7959,-1.3997,23.0501),vec(5.5986,-18.1956,23.0501),vec(-7.3982,-17.7957,23.0501),vec(17.7957,-6.3983,23.0501),vec(-5.3987,18.3955,23.0501),vec(15.9961,10.1975,23.0501),vec(-10.3975,2.9993,23.0501))
    HologramAngle = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0))
    HologramScale = array(vec(1,1,1),vec(4,4,0.05),vec(4.1,4.1,4.1),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01),vec(0.3,0.3,0.01))
    HologramColor = array(vec(255,255,255),vec(244,164,96),vec(220,140,80),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34),vec(178,34,34))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","","","","","","","","","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2)
    timer("createHolos", 1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!

}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    
}
