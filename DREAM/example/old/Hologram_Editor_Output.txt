@name Hologram Editor Output
@persist Hologram:table
@persist SpawnIndex

#include "lib/async"

if( first() ) {
    
    Hologram = table(
                        1 = table( "model" = "", "local" = vec(), "world" = vec(), "scale" = vec(), "units" = vec(), "angle" = ang(), "color" = vec(), "material" = "", "alpha" = 255, "renderfx" = 0, "skin" = 1, "shadow" = 1, "shading" = 1, "parent" = 0 ),
                        3 = table( "model" = "", "local" = vec(), "world" = vec(), "scale" = vec(), "units" = vec(), "angle" = ang(), "color" = vec(), "material" = "", "alpha" = 255, "renderfx" = 0, "skin" = 1, "shadow" = 1, "shading" = 1, "parent" = 0 )
                    )
    
    for( I = 1, 3 ) {
        if( Hologram:exists( I ) ) {
            print( I )
        }
    }
    
    function spawn() {
        if( !SpawnIndex ) { SpawnIndex = 0 }
        while( SpawnIndex < Hologram:count() && holoCanCreate() && perf( 75 ) ) {
            
        }
        if( SpawnIndex < Hologram:count() ) { async( 1, "spawn" ) } else { async( 0.1, "setup" ) }
        
    }
    
    function setup() {
        
        runOnTick( 1 )
    }
    
}

#[
@name lightsaber
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist

#include "lib/async"

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0
    HoloCounter = 0
    
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HologramModel = array("models/holograms/hq_cylinder.mdl","models/cheeze/wires/speaker.mdl","models/jaanus/wiretool/wiretool_beamcaster.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl")
    HologramPosition = array(vec(0,0,45),vec(0,0,41.3965),vec(0,0,46.7969),vec(0,0,42.7979),vec(0,0,46.001),vec(-0.18,0,45),vec(0,-0.4805,44.3652),vec(0,0.4805,44.3652),vec(0.46,0,44.3652),vec(0,0,73.4316),vec(0,0,73.4316))
    HologramAngle = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0))
    HologramScale = array(vec(0.08,0.08,0.4),vec(0.1,0.1,0.5),vec(0.16,0.16,0.16),vec(0.1,0.1,0.05),vec(0.1,0.1,0.05),vec(0.05,0.05,0.05),vec(0.01,0.01,0.1),vec(0.01,0.01,0.1),vec(0.01,0.01,0.1),vec(0.05,0.05,5),vec(-0.08,-0.08,-5))
    HologramColor = array(vec(90,90,90),vec(255,255,255),vec(255,255,255),vec(90,90,90),vec(90,90,90),vec(0,255,0),vec(255,0,0),vec(255,0,0),vec(255,0,0),vec(0,255,0),vec(0,255,0))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,100)
    HologramMaterial = array("","","","","","models/cheeze/buttons2/pwr_green","","","","models/alyx/emptool_glow","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,1,1,1,1,1,1,1,1,1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!

    function modelParent() {
        while( perf() ) { HoloCounter++, if(HologramParent[HoloCounter, number] > 0) { holoParent(HoloCounter, HologramParent[HoloCounter, number]) } }
        if( HoloCounter < HologramModel:count() ) { async( 0.1, "modelParent" ) }
        else { 
            holoParent( 1, entity() )
            
            runOnTick(1)
        }
    }
    
    function modelSpawn( ) {
        while( perf() && holoCanCreate() && HoloCounter < HologramModel:count()) {
            HoloCounter++
            holoCreate( HoloCounter )
            holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
            holoScale(HoloCounter, HologramScale[HoloCounter, vector])
            holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
            holoColor(HoloCounter, HologramColor[HoloCounter, vector])
            holoModel( HoloCounter, HologramModel[HoloCounter, string] )
            holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
            holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
            holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
        }
        if( HoloCounter < HologramModel:count() ) { async( 1, "modelSpawn" ) }
        else { HoloCounter = 0, modelParent() }
    }
    modelSpawn()
}
]#
