# ----------------------------------------------------------------------------------------------------------------------------- #
# ____                                      __          __  __          ___                                                     #
#/\  _ `.                                  /\ \        /\ \/\ \        /\_ \                                                    #
#\ \ \/\ \  _ __    __     __      ___ ___ \ \/ ____   \ \ \_\ \    ___\//\ \     ___      __   _ __    __      ___ ___         #
# \ \ \ \ \/\`'__\/'__`\ /'__`\  /' __` __`\\/ /',__\   \ \  _  \  / __`\\ \ \   / __`\  /'_ `\/\`'__\/'__`\  /' __` __`\       #
#  \ \ \_\ \ \ \//\  __//\ \ \.\_/\ \/\ \/\ \ /\__, `\   \ \ \ \ \/\ \ \ \\_\ \_/\ \ \ \/\ \ \ \ \ \//\ \ \.\_/\ \/\ \/\ \      #
#   \ \____/\ \_\\ \____\ \__/.\_\ \_\ \_\ \_\\/\____/    \ \_\ \_\ \____//\____\ \____/\ \____ \ \_\\ \__/.\_\ \_\ \_\ \_\     #
#    \/___/  \/_/ \/____/\/__/\/_/\/_/\/_/\/_/ \/___/      \/_/\/_/\/___/ \/____/\/___/  \/___ \ \/_/ \/__/\/_/\/_/\/_/\/_/     #
#                                                                                          /\____/                              #
#                                                                                          \_/__/                               #
# ----------------------------------------------------------------------------------------------------------------------------- #
# Modeler Version: v5.1
# Date: 12/24/2018 @ 200
# Holograms: 157
# Notes: 
# --------------------------------------------- #
@name UFO2
@persist Hologram:table Entity:entity Seat:entity Speed ShiftSpeed Driver:entity State
@persist Color:array
@model models/sprops/rectangles/size_3_5/rect_30x30x3.mdl

if( dupefinished() ) { reset() }

if( first( ) ) {
    
    Speed = 120
    ShiftSpeed = 500
    
    Hologram = table()
    Hologram[ "model", array ] = array("models/holograms/cube.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_sphere.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/hq_torus_thin.mdl")
    Hologram[ "position", array ] = array(vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,5.7871),vec(0,0,-5.8857),vec(0,0,8.0684),vec(0,0,20.4219),vec(0,0,8.0684),vec(101.8669,0,10.3604),vec(101.4792,-8.8783,10.3604),vec(100.3192,-17.689,10.3604),vec(98.3959,-26.3651,10.3604),vec(95.7235,-34.8405,10.3604),vec(92.3228,-43.0508,10.3604),vec(88.2194,-50.9335,10.3604),vec(83.4445,-58.4285,10.3604),vec(78.0345,-65.4787,10.3604),vec(72.0308,-72.0307,10.3896),vec(65.4788,-78.0345,10.3604),vec(58.4283,-83.4444,10.3604),vec(50.9333,-88.2193,10.3604),vec(43.0508,-92.3227,10.3604),vec(34.8405,-95.7235,10.3604),vec(26.3651,-98.3959,10.3604),vec(17.689,-100.3193,10.3604),vec(8.8783,-101.4792,10.3604),vec(0,-101.8669,10.3604),vec(-8.8783,-101.4792,10.3604),vec(-17.689,-100.3193,10.3604),vec(-26.3651,-98.3959,10.3604),vec(-34.8406,-95.7236,10.3604),vec(-43.0508,-92.3227,10.3604),vec(-50.9335,-88.2193,10.3604),vec(-58.4285,-83.4445,10.3604),vec(-65.4788,-78.0346,10.3604),vec(-72.0308,-72.0308,10.3604),vec(-78.0345,-65.4787,10.3604),vec(-83.4445,-58.4284,10.3604),vec(-88.2194,-50.9334,10.3604),vec(-92.3228,-43.0508,10.3604),vec(-95.7235,-34.8405,10.3604),vec(-98.3959,-26.3651,10.3604),vec(-100.3193,-17.689,10.3604),vec(-101.4792,-8.8783,10.3604),vec(-101.8669,0,10.3604),vec(-101.4792,8.8783,10.3604),vec(-100.3192,17.689,10.3604),vec(-98.3959,26.3651,10.3604),vec(-95.7235,34.8405,10.3604),vec(-92.3228,43.0508,10.3604),vec(-88.2194,50.9335,10.3604),vec(-83.4445,58.4285,10.3604),vec(-78.0345,65.4787,10.3604),vec(-72.0308,72.0307,10.3896),vec(-65.4788,78.0345,10.3604),vec(-58.4283,83.4444,10.3604),vec(-50.9333,88.2193,10.3604),vec(-43.0508,92.3227,10.3604),vec(-34.8405,95.7235,10.3604),vec(-26.3651,98.3959,10.3604),vec(-17.689,100.3193,10.3604),vec(-8.8783,101.4792,10.3604),vec(0,101.8669,10.3604),vec(8.8783,101.4792,10.3604),vec(17.689,100.3193,10.3604),vec(26.3651,98.3959,10.3604),vec(34.8406,95.7236,10.3604),vec(43.0508,92.3227,10.3604),vec(50.9335,88.2193,10.3604),vec(58.4285,83.4445,10.3604),vec(65.4788,78.0346,10.3604),vec(72.0308,72.0308,10.3604),vec(78.0345,65.4787,10.3604),vec(83.4445,58.4284,10.3604),vec(88.2194,50.9334,10.3604),vec(92.3228,43.0508,10.3604),vec(95.7235,34.8405,10.3604),vec(98.3959,26.3651,10.3604),vec(100.3193,17.689,10.3604),vec(101.4792,8.8783,10.3604),vec(-101.8669,0,-10.3604),vec(-101.4792,-8.8783,-10.3604),vec(-100.3192,-17.689,-10.3604),vec(-98.3959,-26.3651,-10.3604),vec(-95.7235,-34.8405,-10.3604),vec(-92.3228,-43.0508,-10.3604),vec(-88.2194,-50.9335,-10.3604),vec(-83.4445,-58.4285,-10.3604),vec(-78.0345,-65.4787,-10.3604),vec(-72.0308,-72.0307,-10.3896),vec(-65.4788,-78.0345,-10.3604),vec(-58.4283,-83.4444,-10.3604),vec(-50.9333,-88.2193,-10.3604),vec(-43.0508,-92.3227,-10.3604),vec(-34.8405,-95.7235,-10.3604),vec(-26.3651,-98.3959,-10.3604),vec(-17.689,-100.3193,-10.3604),vec(-8.8783,-101.4792,-10.3604),vec(0,-101.8669,-10.3604),vec(8.8783,-101.4792,-10.3604),vec(17.689,-100.3193,-10.3604),vec(26.3651,-98.3959,-10.3604),vec(34.8406,-95.7236,-10.3604),vec(43.0508,-92.3227,-10.3604),vec(50.9335,-88.2193,-10.3604),vec(58.4285,-83.4445,-10.3604),vec(65.4788,-78.0346,-10.3604),vec(72.0308,-72.0308,-10.3604),vec(78.0345,-65.4787,-10.3604),vec(83.4445,-58.4284,-10.3604),vec(88.2194,-50.9334,-10.3604),vec(92.3228,-43.0508,-10.3604),vec(95.7235,-34.8405,-10.3604),vec(98.3959,-26.3651,-10.3604),vec(100.3193,-17.689,-10.3604),vec(101.4792,-8.8783,-10.3604),vec(101.8669,0,-10.3604),vec(101.4792,8.8783,-10.3604),vec(100.3192,17.689,-10.3604),vec(98.3959,26.3651,-10.3604),vec(95.7235,34.8405,-10.3604),vec(92.3228,43.0508,-10.3604),vec(88.2194,50.9335,-10.3604),vec(83.4445,58.4285,-10.3604),vec(78.0345,65.4787,-10.3604),vec(72.0308,72.0307,-10.3896),vec(65.4788,78.0345,-10.3604),vec(58.4283,83.4444,-10.3604),vec(50.9333,88.2193,-10.3604),vec(43.0508,92.3227,-10.3604),vec(34.8405,95.7235,-10.3604),vec(26.3651,98.3959,-10.3604),vec(17.689,100.3193,-10.3604),vec(8.8783,101.4792,-10.3604),vec(0,101.8669,-10.3604),vec(-8.8783,101.4792,-10.3604),vec(-17.689,100.3193,-10.3604),vec(-26.3651,98.3959,-10.3604),vec(-34.8406,95.7236,-10.3604),vec(-43.0508,92.3227,-10.3604),vec(-50.9335,88.2193,-10.3604),vec(-58.4285,83.4445,-10.3604),vec(-65.4788,78.0346,-10.3604),vec(-72.0308,72.0308,-10.3604),vec(-78.0345,65.4787,-10.3604),vec(-83.4445,58.4284,-10.3604),vec(-88.2194,50.9334,-10.3604),vec(-92.3228,43.0508,-10.3604),vec(-95.7235,34.8405,-10.3604),vec(-98.3959,26.3651,-10.3604),vec(-100.3193,17.689,-10.3604),vec(-101.4792,8.8783,-10.3604),vec(0,0,-19.6055),vec(0,0,-20.5),vec(0,0,-19.8525),vec(70.5999,0,11.1914),vec(0,-70.5999,11.1914),vec(-70.5999,0,11.1914),vec(0,70.5999,11.1914),vec(70.5999,0,11.1914),vec(0,-70.5999,11.1914),vec(-70.5999,0,11.1914),vec(0,70.5999,11.1914),vec(71.8,0.1,18.5957),vec(0.1,-71.8,18.5957),vec(-71.8,-0.1,18.5957),vec(-0.1,71.8,18.5957))
    Hologram[ "angle", array ] = array(ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(69,-180,0),ang(69,175,0),ang(69,170,0),ang(69,165,0),ang(69,160,0),ang(69,155,0),ang(69,150,0),ang(69,145,0),ang(69,140,0),ang(69,135,0),ang(69,130,0),ang(69,125,0),ang(69,120,0),ang(69,115,0),ang(69,110,0),ang(69,105,0),ang(69,100,0),ang(69,95,0),ang(69,90,0),ang(69,85,0),ang(69,80,0),ang(69,75,0),ang(69,70,0),ang(69,65,0),ang(69,60,0),ang(69,55,0),ang(69,50,0),ang(69,45,0),ang(69,40,0),ang(69,35,0),ang(69,30,0),ang(69,25,0),ang(69,20,0),ang(69,15,0),ang(69,10,0),ang(69,5,0),ang(69,0,0),ang(69,-5,0),ang(69,-10,0),ang(69,-15,0),ang(69,-20,0),ang(69,-25,0),ang(69,-30,0),ang(69,-35,0),ang(69,-40,0),ang(69,-45,0),ang(69,-50,0),ang(69,-55,0),ang(69,-60,0),ang(69,-65,0),ang(69,-70,0),ang(69,-75,0),ang(69,-80,0),ang(69,-85,0),ang(69,-90,0),ang(69,-95,0),ang(69,-100,0),ang(69,-105,0),ang(69,-110,0),ang(69,-115,0),ang(69,-120,0),ang(69,-125,0),ang(69,-130,0),ang(69,-135,0),ang(69,-140,0),ang(69,-145,0),ang(69,-150,0),ang(69,-155,0),ang(69,-160,0),ang(69,-165,0),ang(69,-170,0),ang(69,-175,0),ang(-69,0,-180),ang(-69,5,180),ang(-69,10,180),ang(-69,15,180),ang(-69,20,180),ang(-69,25,180),ang(-69,30,180),ang(-69,35,180),ang(-69,40,180),ang(-69,45,-180),ang(-69,50,-180),ang(-69,55,-180),ang(-69,60,-180),ang(-69,65,-180),ang(-69,70,-180),ang(-69,75,-180),ang(-69,80,-180),ang(-69,85,-180),ang(-69,90,-180),ang(-69,95,-180),ang(-69,100,-180),ang(-69,105,-180),ang(-69,110,-180),ang(-69,115,-180),ang(-69,120,-180),ang(-69,125,-180),ang(-69,130,-180),ang(-69,135,-180),ang(-69,140,180),ang(-69,145,180),ang(-69,150,180),ang(-69,155,180),ang(-69,160,180),ang(-69,165,180),ang(-69,170,180),ang(-69,175,180),ang(-69,-180,-180),ang(-69,-175,-180),ang(-69,-170,-180),ang(-69,-165,-180),ang(-69,-160,-180),ang(-69,-155,-180),ang(-69,-150,-180),ang(-69,-145,-180),ang(-69,-140,-180),ang(-69,-135,180),ang(-69,-130,180),ang(-69,-125,180),ang(-69,-120,180),ang(-69,-115,180),ang(-69,-110,180),ang(-69,-105,180),ang(-69,-100,180),ang(-69,-95,180),ang(-69,-90,180),ang(-69,-85,180),ang(-69,-80,180),ang(-69,-75,180),ang(-69,-70,180),ang(-69,-65,180),ang(-69,-60,180),ang(-69,-55,180),ang(-69,-50,180),ang(-69,-45,180),ang(-69,-40,-180),ang(-69,-35,-180),ang(-69,-30,-180),ang(-69,-25,-180),ang(-69,-20,-180),ang(-69,-15,-180),ang(-69,-10,-180),ang(-69,-5,-180),ang(0,0,-180),ang(0,0,180),ang(0,0,-180),ang(0,180,0),ang(0,90,0),ang(0,0,0),ang(0,-90,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(0,180,0),ang(-0.5,-90,-8.4),ang(-0.5,-180,-8.4),ang(-0.5,90,-8.4),ang(-0.5,0,-8.4))
    Hologram[ "scale", array ] = array(vec(1,1,1),vec(20,20,20),vec(-20.2,-20.2,-20.2),vec(19.5,19.5,4),vec(-19.7,-19.7,-4.2),vec(19,19,1),vec(19,19,1),vec(9,9,6),vec(8.6,8.6,8.6),vec(-9.2,-9.2,-6.2),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(0.2,0.2,0.9),vec(9,9,9),vec(8.8,8.8,2),vec(-9,-9,-2.2),vec(2,2,2),vec(2,2,2),vec(2,2,2),vec(2,2,2),vec(-2.1,-2.1,-2.1),vec(-2.1,-2.1,-2.1),vec(-2.1,-2.1,-2.1),vec(-2.1,-2.1,-2.1),vec(1.7,1.7,1.7),vec(1.7,1.7,1.7),vec(1.7,1.7,1.7),vec(1.7,1.7,1.7))
    Hologram[ "color", array ] = array(vec(255,255,255),vec(90,90,90),vec(0,0,0),vec(90,90,90),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(90,90,90),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(0,0,0),vec(90,90,90),vec(0,0,0),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0))
    Hologram[ "alpha", array ] = array
    Hologram[ "material", array ] = array("","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")
    Hologram[ "parent", array ] = array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
    Entity = entity( )
    Entity:setMass( 50000 )
    State = 1
    
    for( I = 1, 72 ) {
        Color[ I, vector ] = hsv2rgb( vec( ( 360 / 72 ) * I, 1, 1 ) )
    }
    
    function buffer( ) {
        local Next = Hologram[ "next", number ]
        for( I = Next, Next + clamp( holoRemainingSpawns( ), 0, Hologram[ "model", array ]:count( ) - Next + 1 ) ) {
            holoCreate(
                I,
                entity():toWorld(Hologram["position", array][I, vector]),
                Hologram["scale", array][I, vector],
                entity():toWorld(Hologram["angle", array][I, angle]),
                vec4(Hologram["color", array][I, vector],
                Hologram["alpha", array ][I,number]),
                Hologram["model", array][I, string]
            )
            holoMaterial(I, Hologram["material", array][I, string])
            Hologram[ "next", number ] = I
        }
        if( Next <= Hologram[ "model", array ]:count( ) ) { timer( "buffer", 0.1 ) } else {
            for( I = 1, Hologram[ "model", array ]:count( ) ) {holoParent(I, Hologram["parent", array][I, number]) }
            Seat = seatSpawn( "models/nova/airboat_seat.mdl", Entity:pos( ), Entity:angles( ), 0 )
            Seat:parentTo( Entity )
            Seat:setAlpha( 0 )
            holoPos( 1, Entity:pos( ) )
            holoParent( 1, Entity )
            Seat:propFreeze( 0 )
            Entity:propFreeze( 0 )
            for( I = 1, 72 ) { holoColor( I + 72, vec( 90 ) ) }
            timer( "colors!", 0 )
            runOnTick( 1 )
        }
    } buffer( )
}

if( clk( "buffer" ) ) { buffer( ) } elseif( tickClk( ) ) {
    
    Driver = Seat:driver( )
    
    if( changed( Driver ) & Driver:isPlayer( ) ) {
        runOnKeys( Driver, 1 )
        holoColor( 2, teamColor( Driver:team() ) / 1.5 )
        holoColor( 4, teamColor( Driver:team() ) / 1.5 )
        holoColor( 8, teamColor( Driver:team() ) / 1.5 )
        holoColor( 156, teamColor( Driver:team() ) / 2 )
        holoColor( 158, teamColor( Driver:team() ) / 2 )
        holoColor( 159, teamColor( Driver:team() ) / 2 )
        holoColor( 160, teamColor( Driver:team() ) / 2 )
        holoColor( 161, teamColor( Driver:team() ) / 2 )
    }
    
    Time = realtime() * 50
    
    local NSpeed = Seat:driver( ):keySprint( ) ? Speed + ShiftSpeed : Speed
    
    local Controls = vec( 
        Driver:keyForward( ) - Driver:keyBack( ), 
        Driver:keyLeft( ) - Driver:keyRight( ), 
        ( Driver:keyJump( ) - Driver:keyWalk( ) ) / 2
    ):normalized( ):rotate( Driver:eye( ):setZ( 0 ):toAngle( ) )
    
    if( Driver:isPlayer( ) ) {
        Entity:applyTorque(Entity:inertia() * (rotationVector(inv(quat(Entity)) * quat(ang(Entity:vel():x(), 0, -Entity:vel():y()) / 400)) * 5 - Entity:angVelVector()) * 20)
        Entity:applyForce( ( ( Entity:mass( ) * -propGravity() * tickInterval( ) - ( Entity:vel() * Entity:mass() ) / 20 ) + ( Controls * NSpeed * Entity:mass( ) ) ) )
    }
} elseif( clk( "colors!" ) ) {
    Time = realtime() * 25
    for( I = 1, 72 ) {
        holoColor( I + 10, Color[ ( I + Time ) % 72 + 1, vector ] )
        holoColor( I + 82, Color[ ( I + Time ) % 72 + 1, vector ] )
    }
    timer( "colors!", 60 )
}


