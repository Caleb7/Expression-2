# ----------------------------------------------------------------------------------------------------------------------------- #
# ____                                      __          __  __          ___                                                     #
#/\  _ `.                                  /\ \        /\ \/\ \        /\_ \                                                    #
#\ \ \/\ \  _ __    __     __      ___ ___ \ \/ ____   \ \ \_\ \    ___\//\ \     ___      __   _ __    __      ___ ___         #
# \ \ \ \ \/\`'__\/'__`\ /'__`\  /' __` __`\\/ /',__\   \ \  _  \  / __`\\ \ \   / __`\  /'_ `\/\`'__\/'__`\  /' __` __`\       #
#  \ \ \_\ \ \ \//\  __//\ \ \.\_/\ \/\ \/\ \ /\__, `\   \ \ \ \ \/\ \ \ \\_\ \_/\ \ \ \/\ \ \ \ \ \//\ \ \.\_/\ \/\ \/\ \      #
#   \ \____/\ \_\\ \____\ \__/.\_\ \_\ \_\ \_\\/\____/    \ \_\ \_\ \____//\____\ \____/\ \____ \ \_\\ \__/.\_\ \_\ \_\ \_\     #
#    \/___/  \/_/ \/____/\/__/\/_/\/_/\/_/\/_/ \/___/      \/_/\/_/\/___/ \/____/\/___/  \/___ \ \/_/ \/__/\/_/\/_/\/_/\/_/     #
#                                                                                          /\____/                              #
#                                                                                          \_/__/                               #
# ----------------------------------------------------------------------------------------------------------------------------- #
# Modeler Version: v5.1
# Date: 1/11/2019 @ 2237
# Holograms: 
# Notes: 
# --------------------------------------------- #
@name copy_1110207
@inputs 
@outputs 
@persist Hologram:table

##include "lib/dream"

if( first( ) ) {

    Hologram = table()
    Hologram[ "model", array ] = array("models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate1x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/misc/stair1x1.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate3x3.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/plates/plate1x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/misc/stair1x1.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube3x3x05.mdl","models/hunter/plates/plate2x3.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate025x1.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate05x1.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/plates/plate1x2.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/blocks/cube025x2x025.mdl","models/hunter/plates/plate1x2.mdl")
    Hologram[ "position", array ] = array(vec(-429.4443,-86.8389,118.4453),vec(206.6978,-55.4297,23.3252),vec(-443.5859,-13.1104,154.0449),vec(179.6309,-152.3789,58.9248),vec(-10.4209,39.9121,58.9248),vec(-78.5479,-141.416,153.9199),vec(-24.2808,53.1426,153.9199),vec(109.3809,-28.2598,154.0449),vec(-70.8564,196.3467,154.0449),vec(-56.7148,122.6182,195.5449),vec(-79.9355,163.8262,154.0449),vec(-97.4434,-144.8037,154.0449),vec(206.3301,-55.3271,189.645),vec(159.668,27.4814,154.0449),vec(-103.3428,-230.1348,-0.25),vec(136.4478,68.6895,118.4453),vec(-218.5864,107.041,59.1699),vec(-342.6025,37.1592,59.1699),vec(-173.2246,-106.1191,-0.25),vec(144.6895,-90.3701,-0.25),vec(-262.6328,-237.8867,154.0449),vec(-326.6084,-281.1914,59.1699),vec(-57.083,122.7207,100.4248),vec(-328.6489,24.252,154.0449),vec(-181.0991,52.8379,100.4248),vec(-326.6084,-281.1914,154.0698),vec(-297.3437,-176.3691,199.77),vec(-41.3345,-195.1934,100.4248),vec(-204.3193,94.0459,58.9248),vec(-208.166,-44.1113,58.9248),vec(-112.8242,173.0078,58.9248),vec(-195.2402,126.5674,58.9248),vec(55.6147,-222.2607,23.3252),vec(96.8228,-199.04,58.9248),vec(268.7061,-20.4883,-0.25),vec(128.9414,227.5439,-0.25),vec(20.3057,-160.1504,104.8701),vec(-119.0908,87.7793,-0.25),vec(-219.4287,-23.5117,104.8496),vec(-180.7314,52.7354,154.0449),vec(-24.0068,52.7168,59.1699),vec(45.6299,-70.8633,59.1699),vec(-272.7202,-86.8574,59.1699),vec(-466.6187,-32.7236,59.1699),vec(-466.29,-33.1641,153.9199),vec(-133.1973,-334.4004,153.9199),vec(169.646,-0.9814,154.0698),vec(-429.1313,-86.9258,58.9248),vec(-402.0645,10.0225,58.9248),vec(-118.4141,87.2715,199.6201),vec(74.9297,33.9785,199.77),vec(74.8076,33.6455,-0.25),vec(-359.249,-210.9424,58.9248),vec(-103.4102,-230.4834,199.77),vec(145.0576,-90.4727,199.77),vec(-278.0483,79.9053,153.8247),vec(39.8662,95.6533,58.9248),vec(-153.6641,149.6846,154.0449),vec(-118.7231,87.6768,104.8701),vec(-361.1699,33.3311,154.0449),vec(-30.0161,219.6699,58.9248),vec(-406.2241,-128.0469,154.0449),vec(-429.4443,-86.8389,189.645),vec(229.918,-96.6377,58.9248),vec(-452.665,-45.6309,154.0449),vec(-49.1348,-35.8789,199.6201),vec(-49.209,-36.2363,-0.25),vec(66.9331,192.6025,23.3252),vec(43.7129,233.8105,58.9248),vec(-14.6353,-98.1426,154.0449),vec(-402.3779,10.1104,118.4453),vec(-402.3779,10.1104,189.645),vec(206.3301,-55.3271,118.4453),vec(12.4316,-1.1934,154.0449),vec(-305.4287,-16.9561,195.5449),vec(20.6738,-160.2529,-0.25),vec(183.1094,-14.1191,154.0449),vec(-29.6484,219.5674,118.4453),vec(136.4478,68.6895,189.645),vec(-29.6484,219.5674,189.645),vec(59.4609,-84.1035,58.9248),vec(4.9248,157.6621,-0.25),vec(82.6816,-125.3115,100.4248),vec(105.9023,-166.5195,58.9248),vec(-282.208,-58.1641,154.0449),vec(-165.3506,-265.0762,58.9248),vec(-278.0483,79.9053,58.9248),vec(-297.5737,-175.8789,104.8701),vec(-64.5547,-153.9863,58.9248),vec(-18.1143,-236.4014,58.9248),vec(-157.8789,11.6309,58.9248),vec(-154.0322,149.7871,94.5254),vec(-243.1074,17.8975,11.6504),vec(-154.0322,149.7871,23.3252),vec(-103.71,-230.0322,104.8701),vec(-173.5928,-106.0166,104.8701),vec(55.6147,-222.2607,94.5254),vec(14.4067,-245.4814,58.9248),vec(5.293,157.5586,104.8701),vec(74.4395,33.748,104.8701),vec(144.3223,-90.2676,104.8701),vec(-49.5762,-36.1338,104.8701),vec(-148.2686,-16.7295,59.1699),vec(109.7485,-28.3623,58.9248),vec(-94.1348,177.1689,59.1699),vec(99.5156,122.3145,153.9199),vec(-218.5864,107.041,154.0698),vec(-359.582,-210.8203,154.0449),vec(55.2471,-222.1582,154.0449),vec(67.3008,192.5,154.0449),vec(-68.4014,-292.1426,153.8247),vec(179.6309,-152.3789,153.8247),vec(-208.5337,-44.0078,154.0449),vec(114.748,-194.6846,153.9199),vec(20.0322,-159.7246,199.6201),vec(-173.2988,-106.4766,199.6201),vec(-262.2998,-238.0088,58.9248),vec(-93.5605,176.293,153.9199),vec(-367.2261,-52.3525,199.77),vec(-165.7183,-264.9736,154.0449),vec(4.7988,157.2744,199.6201),vec(-243.4551,17.9648,199.77),vec(30.3687,246.126,153.9199),vec(-367.4365,-51.8975,104.8701),vec(198.8232,103.5283,-0.25),vec(-396.4907,-157.1748,59.1699),vec(239.7739,-125.4326,154.0698),vec(-8.6938,-265.4424,154.0698),vec(-342.6025,37.1592,154.0698),vec(169.646,-0.9814,59.1699),vec(-305.1152,-17.0439,58.9248),vec(-266.2627,59.6006,104.8496),vec(115.7578,-195.3154,59.1699),vec(-284.3154,-5.3232,58.8496),vec(-297.2412,-176.001,-0.25),vec(-8.6938,-265.4424,59.1699),vec(-132.71,-335.3252,59.1699),vec(-202.5635,-211.2988,153.9199),vec(-367.123,-51.9854,-0.25),vec(229.5508,-96.5352,154.0449),vec(-33.4946,81.4102,154.0449),vec(-179.8594,-191.2451,154.0449),vec(-138.6514,-168.0244,195.5449),vec(-111.2168,-71.1777,58.9248),vec(-78.1406,-141.1816,59.1699),vec(239.7739,-125.4326,59.1699),vec(-243.1074,17.8975,-0.25),vec(-68.4014,-292.1426,58.9248),vec(-202.8379,-210.873,59.1699),vec(90.1533,151.3945,58.9248),vec(66.9331,192.6025,94.5254),vec(36.0195,-42.5039,58.9248),vec(12.7993,-1.2949,100.4248),vec(-396.4907,-157.1748,154.0698),vec(-272.7202,-86.8574,154.0698),vec(29.8813,247.0508,59.1699),vec(100.0093,122.5996,59.1699),vec(206.6978,-55.4297,94.5254),vec(183.4775,-14.2217,58.9248),vec(-80.3037,163.9287,58.9248),vec(113.2275,109.8975,154.0449),vec(11.5596,242.7871,154.0449),vec(-148.4297,-17.4004,153.9199),vec(45.3818,-71.583,153.9199),vec(-33.8623,81.5127,58.9248))
    Hologram[ "angle", array ] = array(ang(-90,-150.599,180),ang(-90,-150.599,180),ang(0,29.401,90),ang(90,119.401,180),ang(0,-60.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(90,119.401,180),ang(0,29.401,90),ang(90,-150.599,180),ang(0,-60.599,90),ang(0,-150.599,90),ang(90,-150.599,180),ang(0,119.401,90),ang(0,-150.599,0),ang(-90,-150.599,180),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,0),ang(0,-150.599,0),ang(90,119.401,180),ang(0,-150.599,90),ang(90,-150.599,180),ang(0,-60.599,90),ang(90,-150.599,180),ang(0,-150.599,90),ang(0,-150.599,0),ang(90,-150.599,180),ang(0,-60.599,90),ang(90,119.401,180),ang(0,-150.599,90),ang(0,29.401,90),ang(-90,119.401,180),ang(0,-150.599,90),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,119.401,-180),ang(90,-150.599,180),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(90,-150.599,180),ang(90,119.401,180),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,0),ang(90,-150.599,180),ang(0,-150.599,0),ang(0,-150.599,0),ang(90,-60.599,180),ang(90,119.401,180),ang(90,119.401,180),ang(0,-150.599,0),ang(0,-150.599,90),ang(90,119.401,180),ang(0,119.401,90),ang(90,-150.599,180),ang(0,119.401,90),ang(0,-60.599,90),ang(0,-150.599,0),ang(0,-150.599,0),ang(-90,-150.599,180),ang(0,-60.599,90),ang(90,119.401,180),ang(-90,119.401,180),ang(90,119.401,180),ang(-90,-150.599,180),ang(90,-150.599,180),ang(90,-150.599,180),ang(0,-150.599,0),ang(0,-60.599,90),ang(-90,119.401,180),ang(90,-150.599,180),ang(90,119.401,180),ang(0,-60.599,90),ang(0,-150.599,0),ang(90,-150.599,180),ang(0,119.401,90),ang(0,119.401,90),ang(90,-150.599,180),ang(90,119.401,180),ang(0,-150.599,0),ang(0,-60.599,90),ang(0,119.401,90),ang(0,119.401,90),ang(90,119.401,180),ang(0,29.401,0),ang(-90,119.401,180),ang(0,-150.599,0),ang(0,-150.599,0),ang(90,119.401,180),ang(0,29.401,90),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,90),ang(90,119.401,180),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(90,-150.599,180),ang(90,119.401,180),ang(90,-150.599,180),ang(90,-60.599,180),ang(90,-60.599,180),ang(90,119.401,180),ang(0,-150.599,90),ang(0,-150.599,0),ang(0,-150.599,0),ang(90,119.401,180),ang(0,-150.599,90),ang(0,-150.599,0),ang(90,-150.599,180),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,90),ang(0,-150.599,0),ang(0,-150.599,0),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(90,-150.599,180),ang(0,119.401,-180),ang(0,-150.599,90),ang(0,29.401,0),ang(0,-150.599,0),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,0),ang(0,119.401,90),ang(0,119.401,90),ang(0,29.401,90),ang(90,119.401,180),ang(90,-150.599,180),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,0),ang(90,119.401,180),ang(0,-150.599,90),ang(0,119.401,90),ang(90,-150.599,180),ang(0,119.401,90),ang(90,-150.599,180),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(90,-150.599,180),ang(0,-60.599,90),ang(0,-60.599,90),ang(0,-60.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,-150.599,90),ang(0,119.401,90))
    Hologram[ "scale", array ] = array(vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1))
    Hologram[ "color", array ] = array(vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255))
    Hologram[ "alpha", array ] = array
    Hologram[ "material", array ] = array("","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")
    Hologram[ "skin", array ] = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    Hologram[ "parent", array ] = array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
    Hologram[ "note", array ] = array("","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")

    function buffer( ) {
        local Next = Hologram[ "next", number ]
        for( I = Next, Next + clamp( holoRemainingSpawns( ), 0, Hologram[ "model", array ]:count( ) - Next + 1 ) ) {
            holoCreate(
                I,
                entity():toWorld(Hologram["position", array][I, vector]),
                Hologram["scale", array][I, vector],
                entity():toWorld(Hologram["angle", array][I, angle]),
                vec4(Hologram["color", array][I, vector],
                Hologram["alpha", array ][I,number]),
                Hologram["model", array][I, string]
            )
            holoMaterial(I, Hologram["material", array][I, string])
            Hologram[ "next", number ] = I
        }
        if( Next <= Hologram[ "model", array ]:count( ) ) { timer( "buffer", 0.1 )
        } else {
            for( I = 1, Hologram[ "model", array ]:count( ) ) {holoParent(I, Hologram["parent", array][I, number]) }
            interval( 100 ) }
    } buffer( )
}

if( clk( "buffer" ) ) { buffer( ) } elseif( clk( ) ) {
    interval( 60 )

}





